
LCD_Simple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000b94  00000c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080011e  0080011e  00000c46  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001eb  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001591  00000000  00000000  00000e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f1  00000000  00000000  00002402  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b8a  00000000  00000000  000028f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00003480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a3  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e8  00000000  00000000  000038e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d0  00000000  00000000  00003ecb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	48 c0       	rjmp	.+144    	; 0x92 <__ctors_end>
   2:	62 c0       	rjmp	.+196    	; 0xc8 <__bad_interrupt>
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
   6:	60 c0       	rjmp	.+192    	; 0xc8 <__bad_interrupt>
   8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
   a:	5e c0       	rjmp	.+188    	; 0xc8 <__bad_interrupt>
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
   e:	5c c0       	rjmp	.+184    	; 0xc8 <__bad_interrupt>
  10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
  12:	5a c0       	rjmp	.+180    	; 0xc8 <__bad_interrupt>
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
  16:	58 c0       	rjmp	.+176    	; 0xc8 <__bad_interrupt>
  18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
  1a:	56 c0       	rjmp	.+172    	; 0xc8 <__bad_interrupt>
  1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
  1e:	54 c0       	rjmp	.+168    	; 0xc8 <__bad_interrupt>
  20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
  22:	52 c0       	rjmp	.+164    	; 0xc8 <__bad_interrupt>
  24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
  26:	50 c0       	rjmp	.+160    	; 0xc8 <__bad_interrupt>
  28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
  2a:	30 c2       	rjmp	.+1120   	; 0x48c <__vector_21>
  2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
  2e:	4c c0       	rjmp	.+152    	; 0xc8 <__bad_interrupt>
  30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
  32:	4a c0       	rjmp	.+148    	; 0xc8 <__bad_interrupt>

00000034 <LcdCustomChar>:
  34:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  44:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  54:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  64:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000074 <LDR>:
  74:	4c 44 52 3a 00 00                                   LDR:..

0000007a <POT>:
  7a:	50 4f 54 3a 00 00                                   POT:..

00000080 <CLRROW>:
  80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
	...

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d2 e0       	ldi	r29, 0x02	; 2
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	e4 e9       	ldi	r30, 0x94	; 148
  a6:	fb e0       	ldi	r31, 0x0B	; 11
  a8:	02 c0       	rjmp	.+4      	; 0xae <.do_copy_data_start>

000000aa <.do_copy_data_loop>:
  aa:	05 90       	lpm	r0, Z+
  ac:	0d 92       	st	X+, r0

000000ae <.do_copy_data_start>:
  ae:	ae 31       	cpi	r26, 0x1E	; 30
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <.do_copy_data_loop>

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	ae e1       	ldi	r26, 0x1E	; 30
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a5 32       	cpi	r26, 0x25	; 37
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	4f d2       	rcall	.+1182   	; 0x564 <main>
  c6:	64 c5       	rjmp	.+2760   	; 0xb90 <_exit>

000000c8 <__bad_interrupt>:
  c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <LCDsendChar>:
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#else
	//8 bit part
	LDP=ch;
  ca:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_RS;
  cc:	28 9a       	sbi	0x05, 0	; 5
	LCP|=1<<LCD_E;		
  ce:	2a 9a       	sbi	0x05, 2	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	88 ee       	ldi	r24, 0xE8	; 232
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	fc 01       	movw	r30, r24
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCDsendChar+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
  da:	2a 98       	cbi	0x05, 2	; 5
	LCP&=~(1<<LCD_RS);
  dc:	28 98       	cbi	0x05, 0	; 5
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCDsendChar+0x14>
	_delay_ms(1);
#endif
}
  e2:	08 95       	ret

000000e4 <LCDsendCommand>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
  e4:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
  e6:	2a 9a       	sbi	0x05, 2	; 5
  e8:	88 ee       	ldi	r24, 0xE8	; 232
  ea:	93 e0       	ldi	r25, 0x03	; 3
  ec:	fc 01       	movw	r30, r24
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCDsendCommand+0xa>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
  f2:	2a 98       	cbi	0x05, 2	; 5
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCDsendCommand+0x10>
	_delay_ms(1);	
#endif
}
  f8:	08 95       	ret

000000fa <LCDclr>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
  fe:	2a 9a       	sbi	0x05, 2	; 5
 100:	88 ee       	ldi	r24, 0xE8	; 232
 102:	93 e0       	ldi	r25, 0x03	; 3
 104:	fc 01       	movw	r30, r24
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCDclr+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 10a:	2a 98       	cbi	0x05, 2	; 5
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCDclr+0x12>
#endif
}			
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
}
 110:	08 95       	ret

00000112 <LCDhome>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
 116:	2a 9a       	sbi	0x05, 2	; 5
 118:	88 ee       	ldi	r24, 0xE8	; 232
 11a:	93 e0       	ldi	r25, 0x03	; 3
 11c:	fc 01       	movw	r30, r24
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCDhome+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 122:	2a 98       	cbi	0x05, 2	; 5
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <LCDhome+0x12>
	LCDsendCommand(1<<LCD_CLR);
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
}
 128:	08 95       	ret

0000012a <LCDstring>:
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
 12a:	00 97       	sbiw	r24, 0x00	; 0
 12c:	a1 f0       	breq	.+40     	; 0x156 <LCDstring+0x2c>
 12e:	fc 01       	movw	r30, r24
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	48 ee       	ldi	r20, 0xE8	; 232
 134:	53 e0       	ldi	r21, 0x03	; 3
 136:	0d c0       	rjmp	.+26     	; 0x152 <LCDstring+0x28>

	// print data
	for(i=0; i<nBytes; i++)
	{
		LCDsendChar(data[i]);
 138:	81 91       	ld	r24, Z+
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#else
	//8 bit part
	LDP=ch;
 13a:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_RS;
 13c:	28 9a       	sbi	0x05, 0	; 5
	LCP|=1<<LCD_E;		
 13e:	2a 9a       	sbi	0x05, 2	; 5
 140:	ca 01       	movw	r24, r20
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDstring+0x18>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 146:	2a 98       	cbi	0x05, 2	; 5
	LCP&=~(1<<LCD_RS);
 148:	28 98       	cbi	0x05, 0	; 5
 14a:	ca 01       	movw	r24, r20
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCDstring+0x22>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	26 17       	cp	r18, r22
 154:	88 f3       	brcs	.-30     	; 0x138 <LCDstring+0xe>
 156:	08 95       	ret

00000158 <LCDGotoXY>:
}
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
 158:	62 30       	cpi	r22, 0x02	; 2
 15a:	31 f0       	breq	.+12     	; 0x168 <LCDGotoXY+0x10>
 15c:	63 30       	cpi	r22, 0x03	; 3
 15e:	31 f0       	breq	.+12     	; 0x16c <LCDGotoXY+0x14>
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	29 f4       	brne	.+10     	; 0x16e <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 164:	80 5c       	subi	r24, 0xC0	; 192
 166:	03 c0       	rjmp	.+6      	; 0x16e <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 168:	8c 5e       	subi	r24, 0xEC	; 236
 16a:	01 c0       	rjmp	.+2      	; 0x16e <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 16c:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
 16e:	80 68       	ori	r24, 0x80	; 128
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 170:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
 172:	2a 9a       	sbi	0x05, 2	; 5
 174:	88 ee       	ldi	r24, 0xE8	; 232
 176:	93 e0       	ldi	r25, 0x03	; 3
 178:	fc 01       	movw	r30, r24
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCDGotoXY+0x22>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 17e:	2a 98       	cbi	0x05, 2	; 5
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCDGotoXY+0x28>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
	
}
 184:	08 95       	ret

00000186 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
 18c:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
 18e:	64 2f       	mov	r22, r20
 190:	e3 df       	rcall	.-58     	; 0x158 <LCDGotoXY>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	48 ee       	ldi	r20, 0xE8	; 232
 196:	53 e0       	ldi	r21, 0x03	; 3
 198:	0c c0       	rjmp	.+24     	; 0x1b2 <CopyStringtoLCD+0x2c>
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#else
	//8 bit part
	LDP=ch;
 19a:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_RS;
 19c:	28 9a       	sbi	0x05, 0	; 5
	LCP|=1<<LCD_E;		
 19e:	2a 9a       	sbi	0x05, 2	; 5
 1a0:	ca 01       	movw	r24, r20
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <CopyStringtoLCD+0x1c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 1a6:	2a 98       	cbi	0x05, 2	; 5
	LCP&=~(1<<LCD_RS);
 1a8:	28 98       	cbi	0x05, 0	; 5
 1aa:	ca 01       	movw	r24, r20
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <CopyStringtoLCD+0x26>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
 1b0:	2f 5f       	subi	r18, 0xFF	; 255
 1b2:	fe 01       	movw	r30, r28
 1b4:	e2 0f       	add	r30, r18
 1b6:	f1 1d       	adc	r31, r1
 1b8:	84 91       	lpm	r24, Z+
 1ba:	88 23       	and	r24, r24
 1bc:	71 f7       	brne	.-36     	; 0x19a <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	ec 01       	movw	r28, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
 1ca:	66 0f       	add	r22, r22
 1cc:	66 0f       	add	r22, r22
 1ce:	66 0f       	add	r22, r22
 1d0:	60 64       	ori	r22, 0x40	; 64
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	48 ee       	ldi	r20, 0xE8	; 232
 1d8:	53 e0       	ldi	r21, 0x03	; 3
 1da:	86 2f       	mov	r24, r22
 1dc:	82 0f       	add	r24, r18
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
 1de:	fe 01       	movw	r30, r28
 1e0:	e2 0f       	add	r30, r18
 1e2:	f3 1f       	adc	r31, r19
 1e4:	e4 91       	lpm	r30, Z+
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 1e6:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
 1e8:	2a 9a       	sbi	0x05, 2	; 5
 1ea:	da 01       	movw	r26, r20
 1ec:	11 97       	sbiw	r26, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCDdefinechar+0x28>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 1f0:	2a 98       	cbi	0x05, 2	; 5
 1f2:	da 01       	movw	r26, r20
 1f4:	11 97       	sbiw	r26, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCDdefinechar+0x30>
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#else
	//8 bit part
	LDP=ch;
 1f8:	eb b9       	out	0x0b, r30	; 11
	LCP|=1<<LCD_RS;
 1fa:	28 9a       	sbi	0x05, 0	; 5
	LCP|=1<<LCD_E;		
 1fc:	2a 9a       	sbi	0x05, 2	; 5
 1fe:	fa 01       	movw	r30, r20
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCDdefinechar+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 204:	2a 98       	cbi	0x05, 2	; 5
	LCP&=~(1<<LCD_RS);
 206:	28 98       	cbi	0x05, 0	; 5
 208:	fa 01       	movw	r30, r20
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCDdefinechar+0x46>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	3f 4f       	sbci	r19, 0xFF	; 255
 212:	28 30       	cpi	r18, 0x08	; 8
 214:	31 05       	cpc	r19, r1
 216:	09 f7       	brne	.-62     	; 0x1da <LCDdefinechar+0x16>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <LCDinit>:
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}
void LCDinit(void)//Initializes LCD
{
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	88 e9       	ldi	r24, 0x98	; 152
 226:	9a e3       	ldi	r25, 0x3A	; 58
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCDinit+0xa>


#else
	//8 bit part
	_delay_ms(15);
	LDP=0x00;
 22c:	1b b8       	out	0x0b, r1	; 11
	LCP=0x00;
 22e:	15 b8       	out	0x05, r1	; 5
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
 230:	8a b1       	in	r24, 0x0a	; 10
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	8a b9       	out	0x0a, r24	; 10
			|1<<LCD_D2|1<<LCD_D1|1<<LCD_D0;
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
 236:	84 b1       	in	r24, 0x04	; 4
 238:	87 60       	ori	r24, 0x07	; 7
 23a:	84 b9       	out	0x04, r24	; 4
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 23c:	80 e3       	ldi	r24, 0x30	; 48
 23e:	8b b9       	out	0x0b, r24	; 11
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 240:	2a 9a       	sbi	0x05, 2	; 5
 242:	28 ee       	ldi	r18, 0xE8	; 232
 244:	33 e0       	ldi	r19, 0x03	; 3
 246:	f9 01       	movw	r30, r18
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCDinit+0x2a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 24c:	2a 98       	cbi	0x05, 2	; 5
 24e:	f9 01       	movw	r30, r18
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCDinit+0x32>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 254:	8b b9       	out	0x0b, r24	; 11
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 256:	2a 9a       	sbi	0x05, 2	; 5
 258:	f9 01       	movw	r30, r18
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCDinit+0x3c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 25e:	2a 98       	cbi	0x05, 2	; 5
 260:	f9 01       	movw	r30, r18
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCDinit+0x44>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|0<<LCD_D3
 266:	8b b9       	out	0x0b, r24	; 11
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 268:	2a 9a       	sbi	0x05, 2	; 5
 26a:	c9 01       	movw	r24, r18
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <LCDinit+0x4e>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 270:	2a 98       	cbi	0x05, 2	; 5
 272:	c9 01       	movw	r24, r18
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <LCDinit+0x56>
	_delay_ms(1);
	//--------8 bit dual line----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4|1<<LCD_D3
 278:	88 e3       	ldi	r24, 0x38	; 56
 27a:	8b b9       	out	0x0b, r24	; 11
			|0<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 27c:	2a 9a       	sbi	0x05, 2	; 5
 27e:	c9 01       	movw	r24, r18
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <LCDinit+0x62>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 284:	2a 98       	cbi	0x05, 2	; 5
 286:	c9 01       	movw	r24, r18
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <LCDinit+0x6a>
	_delay_ms(1);
   //-----increment address, invisible cursor shift------
	LDP=0<<LCD_D7|0<<LCD_D6|0<<LCD_D5|0<<LCD_D4|1<<LCD_D3
 28c:	8c e0       	ldi	r24, 0x0C	; 12
 28e:	8b b9       	out	0x0b, r24	; 11
			|1<<LCD_D2|0<<LCD_D1|0<<LCD_D0; //8 it mode
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
 290:	2a 9a       	sbi	0x05, 2	; 5
 292:	c9 01       	movw	r24, r18
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCDinit+0x76>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 298:	2a 98       	cbi	0x05, 2	; 5
 29a:	88 e8       	ldi	r24, 0x88	; 136
 29c:	93 e1       	ldi	r25, 0x13	; 19
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCDinit+0x80>
 2a2:	c4 e3       	ldi	r28, 0x34	; 52
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
 2a6:	60 e0       	ldi	r22, 0x00	; 0
	_delay_ms(5);
		//init custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
 2a8:	16 2f       	mov	r17, r22
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
 2ac:	ce 01       	movw	r24, r28
 2ae:	8a df       	rcall	.-236    	; 0x1c4 <LCDdefinechar>
 2b0:	28 96       	adiw	r28, 0x08	; 8
 2b2:	61 2f       	mov	r22, r17
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(5);
		//init custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
 2b4:	18 30       	cpi	r17, 0x08	; 8
 2b6:	c1 f7       	brne	.-16     	; 0x2a8 <LCDinit+0x8a>
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}

#endif
}			
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	08 95       	ret

000002c0 <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
 2c0:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 2c2:	4e e1       	ldi	r20, 0x1E	; 30
 2c4:	28 ee       	ldi	r18, 0xE8	; 232
 2c6:	33 e0       	ldi	r19, 0x03	; 3
 2c8:	0a c0       	rjmp	.+20     	; 0x2de <LCDshiftLeft+0x1e>
 2ca:	4b b9       	out	0x0b, r20	; 11
	LCP|=1<<LCD_E;		
 2cc:	2a 9a       	sbi	0x05, 2	; 5
 2ce:	f9 01       	movw	r30, r18
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCDshiftLeft+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2d4:	2a 98       	cbi	0x05, 2	; 5
 2d6:	f9 01       	movw	r30, r18
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCDshiftLeft+0x18>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
 2dc:	9f 5f       	subi	r25, 0xFF	; 255
 2de:	98 17       	cp	r25, r24
 2e0:	a0 f3       	brcs	.-24     	; 0x2ca <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
 2e2:	08 95       	ret

000002e4 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
 2e4:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 2e6:	48 e1       	ldi	r20, 0x18	; 24
 2e8:	28 ee       	ldi	r18, 0xE8	; 232
 2ea:	33 e0       	ldi	r19, 0x03	; 3
 2ec:	0a c0       	rjmp	.+20     	; 0x302 <__stack+0x3>
 2ee:	4b b9       	out	0x0b, r20	; 11
	LCP|=1<<LCD_E;		
 2f0:	2a 9a       	sbi	0x05, 2	; 5
 2f2:	f9 01       	movw	r30, r18
 2f4:	31 97       	sbiw	r30, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <LCDshiftRight+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 2f8:	2a 98       	cbi	0x05, 2	; 5
 2fa:	f9 01       	movw	r30, r18
 2fc:	31 97       	sbiw	r30, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCDshiftRight+0x18>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
 300:	9f 5f       	subi	r25, 0xFF	; 255
 302:	98 17       	cp	r25, r24
 304:	a0 f3       	brcs	.-24     	; 0x2ee <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
 306:	08 95       	ret

00000308 <LCDcursorOn>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 308:	8e e0       	ldi	r24, 0x0E	; 14
 30a:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
 30c:	2a 9a       	sbi	0x05, 2	; 5
 30e:	88 ee       	ldi	r24, 0xE8	; 232
 310:	93 e0       	ldi	r25, 0x03	; 3
 312:	fc 01       	movw	r30, r24
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCDcursorOn+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 318:	2a 98       	cbi	0x05, 2	; 5
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <LCDcursorOn+0x12>
	}
}
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
}
 31e:	08 95       	ret

00000320 <LCDcursorOnBlink>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
 324:	2a 9a       	sbi	0x05, 2	; 5
 326:	88 ee       	ldi	r24, 0xE8	; 232
 328:	93 e0       	ldi	r25, 0x03	; 3
 32a:	fc 01       	movw	r30, r24
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <LCDcursorOnBlink+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 330:	2a 98       	cbi	0x05, 2	; 5
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LCDcursorOnBlink+0x12>
	LCDsendCommand(0x0E);
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
}
 336:	08 95       	ret

00000338 <LCDcursorOFF>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 338:	8c e0       	ldi	r24, 0x0C	; 12
 33a:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
 33c:	2a 9a       	sbi	0x05, 2	; 5
 33e:	88 ee       	ldi	r24, 0xE8	; 232
 340:	93 e0       	ldi	r25, 0x03	; 3
 342:	fc 01       	movw	r30, r24
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCDcursorOFF+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 348:	2a 98       	cbi	0x05, 2	; 5
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCDcursorOFF+0x12>
	LCDsendCommand(0x0F);
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
}
 34e:	08 95       	ret

00000350 <LCDblank>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 350:	88 e0       	ldi	r24, 0x08	; 8
 352:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
 354:	2a 9a       	sbi	0x05, 2	; 5
 356:	88 ee       	ldi	r24, 0xE8	; 232
 358:	93 e0       	ldi	r25, 0x03	; 3
 35a:	fc 01       	movw	r30, r24
 35c:	31 97       	sbiw	r30, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCDblank+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 360:	2a 98       	cbi	0x05, 2	; 5
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCDblank+0x12>
	LCDsendCommand(0x0C);
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
}
 366:	08 95       	ret

00000368 <LCDvisible>:
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 368:	8c e0       	ldi	r24, 0x0C	; 12
 36a:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_E;		
 36c:	2a 9a       	sbi	0x05, 2	; 5
 36e:	88 ee       	ldi	r24, 0xE8	; 232
 370:	93 e0       	ldi	r25, 0x03	; 3
 372:	fc 01       	movw	r30, r24
 374:	31 97       	sbiw	r30, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <LCDvisible+0xc>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 378:	2a 98       	cbi	0x05, 2	; 5
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCDvisible+0x12>
	LCDsendCommand(0x08);
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
}
 37e:	08 95       	ret

00000380 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
 380:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 382:	40 e1       	ldi	r20, 0x10	; 16
 384:	28 ee       	ldi	r18, 0xE8	; 232
 386:	33 e0       	ldi	r19, 0x03	; 3
 388:	0a c0       	rjmp	.+20     	; 0x39e <LCDcursorLeft+0x1e>
 38a:	4b b9       	out	0x0b, r20	; 11
	LCP|=1<<LCD_E;		
 38c:	2a 9a       	sbi	0x05, 2	; 5
 38e:	f9 01       	movw	r30, r18
 390:	31 97       	sbiw	r30, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCDcursorLeft+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 394:	2a 98       	cbi	0x05, 2	; 5
 396:	f9 01       	movw	r30, r18
 398:	31 97       	sbiw	r30, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <LCDcursorLeft+0x18>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 39c:	9f 5f       	subi	r25, 0xFF	; 255
 39e:	98 17       	cp	r25, r24
 3a0:	a0 f3       	brcs	.-24     	; 0x38a <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
 3a2:	08 95       	ret

000003a4 <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
 3a4:	90 e0       	ldi	r25, 0x00	; 0
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);
#else
	//8 bit part
	LDP=cmd;
 3a6:	44 e1       	ldi	r20, 0x14	; 20
 3a8:	28 ee       	ldi	r18, 0xE8	; 232
 3aa:	33 e0       	ldi	r19, 0x03	; 3
 3ac:	0a c0       	rjmp	.+20     	; 0x3c2 <LCDcursorRight+0x1e>
 3ae:	4b b9       	out	0x0b, r20	; 11
	LCP|=1<<LCD_E;		
 3b0:	2a 9a       	sbi	0x05, 2	; 5
 3b2:	f9 01       	movw	r30, r18
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCDcursorRight+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
 3b8:	2a 98       	cbi	0x05, 2	; 5
 3ba:	f9 01       	movw	r30, r18
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCDcursorRight+0x18>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
 3c0:	9f 5f       	subi	r25, 0xFF	; 255
 3c2:	98 17       	cp	r25, r24
 3c4:	a0 f3       	brcs	.-24     	; 0x3ae <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
 3c6:	08 95       	ret

000003c8 <LCDprogressBar>:
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
 3c8:	96 e0       	ldi	r25, 0x06	; 6
 3ca:	89 9f       	mul	r24, r25
 3cc:	c0 01       	movw	r24, r0
 3ce:	11 24       	eor	r1, r1
 3d0:	24 2f       	mov	r18, r20
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	fc 01       	movw	r30, r24
 3d6:	e2 9f       	mul	r30, r18
 3d8:	c0 01       	movw	r24, r0
 3da:	e3 9f       	mul	r30, r19
 3dc:	90 0d       	add	r25, r0
 3de:	f2 9f       	mul	r31, r18
 3e0:	90 0d       	add	r25, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	8a d3       	rcall	.+1812   	; 0xafc <__divmodhi4>
 3e8:	9b 01       	movw	r18, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
 3ea:	cb 01       	movw	r24, r22
 3ec:	66 e0       	ldi	r22, 0x06	; 6
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	71 d3       	rcall	.+1762   	; 0xad4 <__udivmodhi4>
 3f2:	a8 2f       	mov	r26, r24
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	e8 ee       	ldi	r30, 0xE8	; 232
 3fc:	f3 e0       	ldi	r31, 0x03	; 3
 3fe:	1b c0       	rjmp	.+54     	; 0x436 <LCDprogressBar+0x6e>
	// print exactly "length" characters
	for(i=0; i<length; i++)
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
 400:	cb 01       	movw	r24, r22
 402:	05 96       	adiw	r24, 0x05	; 5
 404:	28 17       	cp	r18, r24
 406:	39 07       	cpc	r19, r25
 408:	10 f0       	brcs	.+4      	; 0x40e <LCDprogressBar+0x46>
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	06 c0       	rjmp	.+12     	; 0x41a <LCDprogressBar+0x52>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
 40e:	26 17       	cp	r18, r22
 410:	37 07       	cpc	r19, r23
 412:	10 f0       	brcs	.+4      	; 0x418 <LCDprogressBar+0x50>
 414:	8a 2f       	mov	r24, r26
 416:	01 c0       	rjmp	.+2      	; 0x41a <LCDprogressBar+0x52>
 418:	80 e0       	ldi	r24, 0x00	; 0
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#else
	//8 bit part
	LDP=ch;
 41a:	8b b9       	out	0x0b, r24	; 11
	LCP|=1<<LCD_RS;
 41c:	28 9a       	sbi	0x05, 0	; 5
	LCP|=1<<LCD_E;		
 41e:	2a 9a       	sbi	0x05, 2	; 5
 420:	cf 01       	movw	r24, r30
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <LCDprogressBar+0x5a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
 426:	2a 98       	cbi	0x05, 2	; 5
	LCP&=~(1<<LCD_RS);
 428:	28 98       	cbi	0x05, 0	; 5
 42a:	cf 01       	movw	r24, r30
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <LCDprogressBar+0x64>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
 430:	5f 5f       	subi	r21, 0xFF	; 255
 432:	6a 5f       	subi	r22, 0xFA	; 250
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	54 17       	cp	r21, r20
 438:	18 f3       	brcs	.-58     	; 0x400 <LCDprogressBar+0x38>
		
		// write character to display
		LCDsendChar(c);
	}

}
 43a:	08 95       	ret

0000043c <adc_init>:
//*****************************************************************************
void adc_init(void)
{
//select reference voltage
//AVCC with external capacitor at AREF pin
ADMUX|=(0<<REFS1)|(1<<REFS0);
 43c:	ec e7       	ldi	r30, 0x7C	; 124
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	80 64       	ori	r24, 0x40	; 64
 444:	80 83       	st	Z, r24
//set prescaller and enable ADC
ADCSRA|=(1<<ADEN)|(1<<ADIE);//enable ADC with dummy conversion
 446:	ea e7       	ldi	r30, 0x7A	; 122
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	88 68       	ori	r24, 0x88	; 136
 44e:	80 83       	st	Z, r24
//set sleep mode for ADC noise reduction conversion
set_sleep_mode(SLEEP_MODE_ADC);
 450:	83 b7       	in	r24, 0x33	; 51
 452:	81 7f       	andi	r24, 0xF1	; 241
 454:	82 60       	ori	r24, 0x02	; 2
 456:	83 bf       	out	0x33, r24	; 51
}
 458:	08 95       	ret

0000045a <adc_start_conversion>:
//
//*****************************************************************************
void adc_start_conversion(uint8_t channel)
{
//remember current ADC channel;
ch=channel;
 45a:	80 93 1e 01 	sts	0x011E, r24
//set ADC channel
ADMUX=(ADMUX&0xF0)|channel;
 45e:	ec e7       	ldi	r30, 0x7C	; 124
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	90 81       	ld	r25, Z
 464:	90 7f       	andi	r25, 0xF0	; 240
 466:	98 2b       	or	r25, r24
 468:	90 83       	st	Z, r25
//Start conversionio with Interupt after conversion
//enable global interrupts
sei();
 46a:	78 94       	sei
ADCSRA |= (1<<ADSC)|(1<<ADIE);
 46c:	ea e7       	ldi	r30, 0x7A	; 122
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	88 64       	ori	r24, 0x48	; 72
 474:	80 83       	st	Z, r24
}
 476:	08 95       	ret

00000478 <delay1s>:
//
//*****************************************************************************

//delay 1s
void delay1s(void)
{
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	40 e1       	ldi	r20, 0x10	; 16
 47c:	57 e2       	ldi	r21, 0x27	; 39
 47e:	ca 01       	movw	r24, r20
 480:	01 97       	sbiw	r24, 0x01	; 1
 482:	f1 f7       	brne	.-4      	; 0x480 <delay1s+0x8>
	uint8_t i;
	for(i=0;i<100;i++)
 484:	2f 5f       	subi	r18, 0xFF	; 255
 486:	24 36       	cpi	r18, 0x64	; 100
 488:	d1 f7       	brne	.-12     	; 0x47e <delay1s+0x6>
	{
		_delay_ms(10);
	}
}
 48a:	08 95       	ret

0000048c <__vector_21>:
//
//  ADC conversion complete service routine 
//
//*****************************************************************************
ISR(ADC_vect)
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	ff 92       	push	r15
 498:	0f 93       	push	r16
 49a:	1f 93       	push	r17
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
	uint16_t adc_value;
	adc_value = ADCL;  
 4b4:	00 91 78 00 	lds	r16, 0x0078
 4b8:	10 e0       	ldi	r17, 0x00	; 0
	/*shift from low level to high level ADC, from 8bit to 10bit*/
	adc_value += (ADCH<<8);
 4ba:	f0 90 79 00 	lds	r15, 0x0079
	CopyStringtoLCD(CLRROW, 0, ch );
 4be:	80 e8       	ldi	r24, 0x80	; 128
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	40 91 1e 01 	lds	r20, 0x011E
 4c8:	5e de       	rcall	.-836    	; 0x186 <CopyStringtoLCD>
	CopyStringtoLCD(LCDXY[(ch)], 0, ch );
 4ca:	40 91 1e 01 	lds	r20, 0x011E
 4ce:	e4 2f       	mov	r30, r20
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	ee 0f       	add	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	e4 5f       	subi	r30, 0xF4	; 244
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
 4da:	80 81       	ld	r24, Z
 4dc:	91 81       	ldd	r25, Z+1	; 0x01
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	52 de       	rcall	.-860    	; 0x186 <CopyStringtoLCD>
	printf("%d", adc_value);
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <__vector_21+0x58>
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <__vector_21+0x5a>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	ed b7       	in	r30, 0x3d	; 61
 4ec:	fe b7       	in	r31, 0x3e	; 62
 4ee:	92 83       	std	Z+2, r25	; 0x02
 4f0:	81 83       	std	Z+1, r24	; 0x01
 4f2:	9f 2d       	mov	r25, r15
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	80 0f       	add	r24, r16
 4f8:	91 1f       	adc	r25, r17
 4fa:	94 83       	std	Z+4, r25	; 0x04
 4fc:	83 83       	std	Z+3, r24	; 0x03
 4fe:	6a d0       	rcall	.+212    	; 0x5d4 <printf>
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	ff 90       	pop	r15
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <init>:
//*****************************************************************************

void init(void)
{
	//init stream
	stdout = &lcd_str;
 530:	80 e1       	ldi	r24, 0x10	; 16
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	90 93 22 01 	sts	0x0122, r25
 538:	80 93 21 01 	sts	0x0121, r24
	//init LCD
	LCDinit();//init LCD bit, dual line, cursor right
 53c:	70 de       	rcall	.-800    	; 0x21e <LCDinit>
	LCDclr();//clears LCD
 53e:	dd dd       	rcall	.-1094   	; 0xfa <LCDclr>
	LCDGotoXY(0, 0);//Cursor Home
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	09 de       	rcall	.-1006   	; 0x158 <LCDGotoXY>
//*****************************************************************************
void adc_init(void)
{
//select reference voltage
//AVCC with external capacitor at AREF pin
ADMUX|=(0<<REFS1)|(1<<REFS0);
 546:	ec e7       	ldi	r30, 0x7C	; 124
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	80 81       	ld	r24, Z
 54c:	80 64       	ori	r24, 0x40	; 64
 54e:	80 83       	st	Z, r24
//set prescaller and enable ADC
ADCSRA|=(1<<ADEN)|(1<<ADIE);//enable ADC with dummy conversion
 550:	ea e7       	ldi	r30, 0x7A	; 122
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	88 68       	ori	r24, 0x88	; 136
 558:	80 83       	st	Z, r24
//set sleep mode for ADC noise reduction conversion
set_sleep_mode(SLEEP_MODE_ADC);
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	81 7f       	andi	r24, 0xF1	; 241
 55e:	82 60       	ori	r24, 0x02	; 2
 560:	83 bf       	out	0x33, r24	; 51
	LCDinit();//init LCD bit, dual line, cursor right
	LCDclr();//clears LCD
	LCDGotoXY(0, 0);//Cursor Home
	//Init ADC
	adc_init();
}
 562:	08 95       	ret

00000564 <main>:
//  run analog digital converter, timer. 
//
//*****************************************************************************
int main(void)
{
	init();
 564:	e5 df       	rcall	.-54     	; 0x530 <init>
	printf("ADC Test");
 566:	00 d0       	rcall	.+0      	; 0x568 <main+0x4>
 568:	83 e0       	ldi	r24, 0x03	; 3
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	ed b7       	in	r30, 0x3d	; 61
 56e:	fe b7       	in	r31, 0x3e	; 62
 570:	92 83       	std	Z+2, r25	; 0x02
 572:	81 83       	std	Z+1, r24	; 0x01
 574:	2f d0       	rcall	.+94     	; 0x5d4 <printf>
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	40 e1       	ldi	r20, 0x10	; 16
 57e:	57 e2       	ldi	r21, 0x27	; 39
 580:	ca 01       	movw	r24, r20
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <main+0x1e>

//delay 1s
void delay1s(void)
{
	uint8_t i;
	for(i=0;i<100;i++)
 586:	2f 5f       	subi	r18, 0xFF	; 255
 588:	24 36       	cpi	r18, 0x64	; 100
 58a:	d1 f7       	brne	.-12     	; 0x580 <main+0x1c>
 58c:	20 e3       	ldi	r18, 0x30	; 48
 58e:	35 e7       	ldi	r19, 0x75	; 117
void adc_start_conversion(uint8_t channel)
{
//remember current ADC channel;
ch=channel;
//set ADC channel
ADMUX=(ADMUX&0xF0)|channel;
 590:	80 91 7c 00 	lds	r24, 0x007C
 594:	80 7f       	andi	r24, 0xF0	; 240
 596:	80 93 7c 00 	sts	0x007C, r24
//Start conversionio with Interupt after conversion
//enable global interrupts
sei();
 59a:	78 94       	sei
ADCSRA |= (1<<ADSC)|(1<<ADIE);
 59c:	80 91 7a 00 	lds	r24, 0x007A
 5a0:	88 64       	ori	r24, 0x48	; 72
 5a2:	80 93 7a 00 	sts	0x007A, r24
 5a6:	c9 01       	movw	r24, r18
 5a8:	01 97       	sbiw	r24, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <main+0x44>
void adc_start_conversion(uint8_t channel)
{
//remember current ADC channel;
ch=channel;
//set ADC channel
ADMUX=(ADMUX&0xF0)|channel;
 5ac:	80 91 7c 00 	lds	r24, 0x007C
 5b0:	80 7f       	andi	r24, 0xF0	; 240
 5b2:	81 60       	ori	r24, 0x01	; 1
 5b4:	80 93 7c 00 	sts	0x007C, r24
//Start conversionio with Interupt after conversion
//enable global interrupts
sei();
 5b8:	78 94       	sei
ADCSRA |= (1<<ADSC)|(1<<ADIE);
 5ba:	80 91 7a 00 	lds	r24, 0x007A
 5be:	88 64       	ori	r24, 0x48	; 72
 5c0:	80 93 7a 00 	sts	0x007A, r24
 5c4:	c9 01       	movw	r24, r18
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <main+0x62>
 5ca:	e2 cf       	rjmp	.-60     	; 0x590 <main+0x2c>

000005cc <LCDsendstream>:
//  Set LCD stream function 
//
//*****************************************************************************
static int LCDsendstream(char c , FILE *stream)
{
LCDsendChar(c);
 5cc:	7e dd       	rcall	.-1284   	; 0xca <LCDsendChar>
return 0;
}
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	08 95       	ret

000005d4 <printf>:
 5d4:	a0 e0       	ldi	r26, 0x00	; 0
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	ef ee       	ldi	r30, 0xEF	; 239
 5da:	f2 e0       	ldi	r31, 0x02	; 2
 5dc:	b2 c2       	rjmp	.+1380   	; 0xb42 <__prologue_saves__+0x20>
 5de:	fe 01       	movw	r30, r28
 5e0:	35 96       	adiw	r30, 0x05	; 5
 5e2:	61 91       	ld	r22, Z+
 5e4:	71 91       	ld	r23, Z+
 5e6:	80 91 21 01 	lds	r24, 0x0121
 5ea:	90 91 22 01 	lds	r25, 0x0122
 5ee:	af 01       	movw	r20, r30
 5f0:	03 d0       	rcall	.+6      	; 0x5f8 <vfprintf>
 5f2:	20 96       	adiw	r28, 0x00	; 0
 5f4:	e2 e0       	ldi	r30, 0x02	; 2
 5f6:	c1 c2       	rjmp	.+1410   	; 0xb7a <__epilogue_restores__+0x20>

000005f8 <vfprintf>:
 5f8:	ab e0       	ldi	r26, 0x0B	; 11
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e1 e0       	ldi	r30, 0x01	; 1
 5fe:	f3 e0       	ldi	r31, 0x03	; 3
 600:	90 c2       	rjmp	.+1312   	; 0xb22 <__prologue_saves__>
 602:	3c 01       	movw	r6, r24
 604:	2b 01       	movw	r4, r22
 606:	5a 01       	movw	r10, r20
 608:	fc 01       	movw	r30, r24
 60a:	17 82       	std	Z+7, r1	; 0x07
 60c:	16 82       	std	Z+6, r1	; 0x06
 60e:	83 81       	ldd	r24, Z+3	; 0x03
 610:	81 fd       	sbrc	r24, 1
 612:	03 c0       	rjmp	.+6      	; 0x61a <vfprintf+0x22>
 614:	6f ef       	ldi	r22, 0xFF	; 255
 616:	7f ef       	ldi	r23, 0xFF	; 255
 618:	b9 c1       	rjmp	.+882    	; 0x98c <vfprintf+0x394>
 61a:	9a e0       	ldi	r25, 0x0A	; 10
 61c:	89 2e       	mov	r8, r25
 61e:	1e 01       	movw	r2, r28
 620:	08 94       	sec
 622:	21 1c       	adc	r2, r1
 624:	31 1c       	adc	r3, r1
 626:	f3 01       	movw	r30, r6
 628:	23 81       	ldd	r18, Z+3	; 0x03
 62a:	f2 01       	movw	r30, r4
 62c:	23 fd       	sbrc	r18, 3
 62e:	85 91       	lpm	r24, Z+
 630:	23 ff       	sbrs	r18, 3
 632:	81 91       	ld	r24, Z+
 634:	2f 01       	movw	r4, r30
 636:	88 23       	and	r24, r24
 638:	09 f4       	brne	.+2      	; 0x63c <vfprintf+0x44>
 63a:	a5 c1       	rjmp	.+842    	; 0x986 <vfprintf+0x38e>
 63c:	85 32       	cpi	r24, 0x25	; 37
 63e:	39 f4       	brne	.+14     	; 0x64e <vfprintf+0x56>
 640:	23 fd       	sbrc	r18, 3
 642:	85 91       	lpm	r24, Z+
 644:	23 ff       	sbrs	r18, 3
 646:	81 91       	ld	r24, Z+
 648:	2f 01       	movw	r4, r30
 64a:	85 32       	cpi	r24, 0x25	; 37
 64c:	21 f4       	brne	.+8      	; 0x656 <vfprintf+0x5e>
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	b3 01       	movw	r22, r6
 652:	b6 d1       	rcall	.+876    	; 0x9c0 <fputc>
 654:	e8 cf       	rjmp	.-48     	; 0x626 <vfprintf+0x2e>
 656:	98 2f       	mov	r25, r24
 658:	ff 24       	eor	r15, r15
 65a:	ee 24       	eor	r14, r14
 65c:	99 24       	eor	r9, r9
 65e:	ff e1       	ldi	r31, 0x1F	; 31
 660:	ff 15       	cp	r31, r15
 662:	d0 f0       	brcs	.+52     	; 0x698 <vfprintf+0xa0>
 664:	9b 32       	cpi	r25, 0x2B	; 43
 666:	69 f0       	breq	.+26     	; 0x682 <vfprintf+0x8a>
 668:	9c 32       	cpi	r25, 0x2C	; 44
 66a:	28 f4       	brcc	.+10     	; 0x676 <vfprintf+0x7e>
 66c:	90 32       	cpi	r25, 0x20	; 32
 66e:	59 f0       	breq	.+22     	; 0x686 <vfprintf+0x8e>
 670:	93 32       	cpi	r25, 0x23	; 35
 672:	91 f4       	brne	.+36     	; 0x698 <vfprintf+0xa0>
 674:	0e c0       	rjmp	.+28     	; 0x692 <vfprintf+0x9a>
 676:	9d 32       	cpi	r25, 0x2D	; 45
 678:	49 f0       	breq	.+18     	; 0x68c <vfprintf+0x94>
 67a:	90 33       	cpi	r25, 0x30	; 48
 67c:	69 f4       	brne	.+26     	; 0x698 <vfprintf+0xa0>
 67e:	41 e0       	ldi	r20, 0x01	; 1
 680:	24 c0       	rjmp	.+72     	; 0x6ca <vfprintf+0xd2>
 682:	52 e0       	ldi	r21, 0x02	; 2
 684:	f5 2a       	or	r15, r21
 686:	84 e0       	ldi	r24, 0x04	; 4
 688:	f8 2a       	or	r15, r24
 68a:	28 c0       	rjmp	.+80     	; 0x6dc <vfprintf+0xe4>
 68c:	98 e0       	ldi	r25, 0x08	; 8
 68e:	f9 2a       	or	r15, r25
 690:	25 c0       	rjmp	.+74     	; 0x6dc <vfprintf+0xe4>
 692:	e0 e1       	ldi	r30, 0x10	; 16
 694:	fe 2a       	or	r15, r30
 696:	22 c0       	rjmp	.+68     	; 0x6dc <vfprintf+0xe4>
 698:	f7 fc       	sbrc	r15, 7
 69a:	29 c0       	rjmp	.+82     	; 0x6ee <vfprintf+0xf6>
 69c:	89 2f       	mov	r24, r25
 69e:	80 53       	subi	r24, 0x30	; 48
 6a0:	8a 30       	cpi	r24, 0x0A	; 10
 6a2:	70 f4       	brcc	.+28     	; 0x6c0 <vfprintf+0xc8>
 6a4:	f6 fe       	sbrs	r15, 6
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <vfprintf+0xba>
 6a8:	98 9c       	mul	r9, r8
 6aa:	90 2c       	mov	r9, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	98 0e       	add	r9, r24
 6b0:	15 c0       	rjmp	.+42     	; 0x6dc <vfprintf+0xe4>
 6b2:	e8 9c       	mul	r14, r8
 6b4:	e0 2c       	mov	r14, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	e8 0e       	add	r14, r24
 6ba:	f0 e2       	ldi	r31, 0x20	; 32
 6bc:	ff 2a       	or	r15, r31
 6be:	0e c0       	rjmp	.+28     	; 0x6dc <vfprintf+0xe4>
 6c0:	9e 32       	cpi	r25, 0x2E	; 46
 6c2:	29 f4       	brne	.+10     	; 0x6ce <vfprintf+0xd6>
 6c4:	f6 fc       	sbrc	r15, 6
 6c6:	5f c1       	rjmp	.+702    	; 0x986 <vfprintf+0x38e>
 6c8:	40 e4       	ldi	r20, 0x40	; 64
 6ca:	f4 2a       	or	r15, r20
 6cc:	07 c0       	rjmp	.+14     	; 0x6dc <vfprintf+0xe4>
 6ce:	9c 36       	cpi	r25, 0x6C	; 108
 6d0:	19 f4       	brne	.+6      	; 0x6d8 <vfprintf+0xe0>
 6d2:	50 e8       	ldi	r21, 0x80	; 128
 6d4:	f5 2a       	or	r15, r21
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <vfprintf+0xe4>
 6d8:	98 36       	cpi	r25, 0x68	; 104
 6da:	49 f4       	brne	.+18     	; 0x6ee <vfprintf+0xf6>
 6dc:	f2 01       	movw	r30, r4
 6de:	23 fd       	sbrc	r18, 3
 6e0:	95 91       	lpm	r25, Z+
 6e2:	23 ff       	sbrs	r18, 3
 6e4:	91 91       	ld	r25, Z+
 6e6:	2f 01       	movw	r4, r30
 6e8:	99 23       	and	r25, r25
 6ea:	09 f0       	breq	.+2      	; 0x6ee <vfprintf+0xf6>
 6ec:	b8 cf       	rjmp	.-144    	; 0x65e <vfprintf+0x66>
 6ee:	89 2f       	mov	r24, r25
 6f0:	85 54       	subi	r24, 0x45	; 69
 6f2:	83 30       	cpi	r24, 0x03	; 3
 6f4:	18 f0       	brcs	.+6      	; 0x6fc <vfprintf+0x104>
 6f6:	80 52       	subi	r24, 0x20	; 32
 6f8:	83 30       	cpi	r24, 0x03	; 3
 6fa:	38 f4       	brcc	.+14     	; 0x70a <vfprintf+0x112>
 6fc:	44 e0       	ldi	r20, 0x04	; 4
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	a4 0e       	add	r10, r20
 702:	b5 1e       	adc	r11, r21
 704:	5f e3       	ldi	r21, 0x3F	; 63
 706:	59 83       	std	Y+1, r21	; 0x01
 708:	0f c0       	rjmp	.+30     	; 0x728 <vfprintf+0x130>
 70a:	93 36       	cpi	r25, 0x63	; 99
 70c:	31 f0       	breq	.+12     	; 0x71a <vfprintf+0x122>
 70e:	93 37       	cpi	r25, 0x73	; 115
 710:	79 f0       	breq	.+30     	; 0x730 <vfprintf+0x138>
 712:	93 35       	cpi	r25, 0x53	; 83
 714:	09 f0       	breq	.+2      	; 0x718 <vfprintf+0x120>
 716:	52 c0       	rjmp	.+164    	; 0x7bc <vfprintf+0x1c4>
 718:	1f c0       	rjmp	.+62     	; 0x758 <vfprintf+0x160>
 71a:	f5 01       	movw	r30, r10
 71c:	80 81       	ld	r24, Z
 71e:	89 83       	std	Y+1, r24	; 0x01
 720:	42 e0       	ldi	r20, 0x02	; 2
 722:	50 e0       	ldi	r21, 0x00	; 0
 724:	a4 0e       	add	r10, r20
 726:	b5 1e       	adc	r11, r21
 728:	61 01       	movw	r12, r2
 72a:	01 e0       	ldi	r16, 0x01	; 1
 72c:	10 e0       	ldi	r17, 0x00	; 0
 72e:	11 c0       	rjmp	.+34     	; 0x752 <vfprintf+0x15a>
 730:	f5 01       	movw	r30, r10
 732:	c0 80       	ld	r12, Z
 734:	d1 80       	ldd	r13, Z+1	; 0x01
 736:	f6 fc       	sbrc	r15, 6
 738:	03 c0       	rjmp	.+6      	; 0x740 <vfprintf+0x148>
 73a:	6f ef       	ldi	r22, 0xFF	; 255
 73c:	7f ef       	ldi	r23, 0xFF	; 255
 73e:	02 c0       	rjmp	.+4      	; 0x744 <vfprintf+0x14c>
 740:	69 2d       	mov	r22, r9
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	42 e0       	ldi	r20, 0x02	; 2
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	a4 0e       	add	r10, r20
 74a:	b5 1e       	adc	r11, r21
 74c:	c6 01       	movw	r24, r12
 74e:	2d d1       	rcall	.+602    	; 0x9aa <strnlen>
 750:	8c 01       	movw	r16, r24
 752:	5f e7       	ldi	r21, 0x7F	; 127
 754:	f5 22       	and	r15, r21
 756:	13 c0       	rjmp	.+38     	; 0x77e <vfprintf+0x186>
 758:	f5 01       	movw	r30, r10
 75a:	c0 80       	ld	r12, Z
 75c:	d1 80       	ldd	r13, Z+1	; 0x01
 75e:	f6 fc       	sbrc	r15, 6
 760:	03 c0       	rjmp	.+6      	; 0x768 <vfprintf+0x170>
 762:	6f ef       	ldi	r22, 0xFF	; 255
 764:	7f ef       	ldi	r23, 0xFF	; 255
 766:	02 c0       	rjmp	.+4      	; 0x76c <vfprintf+0x174>
 768:	69 2d       	mov	r22, r9
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	42 e0       	ldi	r20, 0x02	; 2
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	a4 0e       	add	r10, r20
 772:	b5 1e       	adc	r11, r21
 774:	c6 01       	movw	r24, r12
 776:	0e d1       	rcall	.+540    	; 0x994 <strnlen_P>
 778:	8c 01       	movw	r16, r24
 77a:	50 e8       	ldi	r21, 0x80	; 128
 77c:	f5 2a       	or	r15, r21
 77e:	f3 fe       	sbrs	r15, 3
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0x196>
 782:	18 c0       	rjmp	.+48     	; 0x7b4 <vfprintf+0x1bc>
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	b3 01       	movw	r22, r6
 78a:	1a d1       	rcall	.+564    	; 0x9c0 <fputc>
 78c:	ea 94       	dec	r14
 78e:	8e 2d       	mov	r24, r14
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	08 17       	cp	r16, r24
 794:	19 07       	cpc	r17, r25
 796:	b0 f3       	brcs	.-20     	; 0x784 <vfprintf+0x18c>
 798:	0d c0       	rjmp	.+26     	; 0x7b4 <vfprintf+0x1bc>
 79a:	f6 01       	movw	r30, r12
 79c:	f7 fc       	sbrc	r15, 7
 79e:	85 91       	lpm	r24, Z+
 7a0:	f7 fe       	sbrs	r15, 7
 7a2:	81 91       	ld	r24, Z+
 7a4:	6f 01       	movw	r12, r30
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	b3 01       	movw	r22, r6
 7aa:	0a d1       	rcall	.+532    	; 0x9c0 <fputc>
 7ac:	e1 10       	cpse	r14, r1
 7ae:	ea 94       	dec	r14
 7b0:	01 50       	subi	r16, 0x01	; 1
 7b2:	10 40       	sbci	r17, 0x00	; 0
 7b4:	01 15       	cp	r16, r1
 7b6:	11 05       	cpc	r17, r1
 7b8:	81 f7       	brne	.-32     	; 0x79a <vfprintf+0x1a2>
 7ba:	e2 c0       	rjmp	.+452    	; 0x980 <vfprintf+0x388>
 7bc:	94 36       	cpi	r25, 0x64	; 100
 7be:	11 f0       	breq	.+4      	; 0x7c4 <vfprintf+0x1cc>
 7c0:	99 36       	cpi	r25, 0x69	; 105
 7c2:	61 f5       	brne	.+88     	; 0x81c <vfprintf+0x224>
 7c4:	f7 fe       	sbrs	r15, 7
 7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <vfprintf+0x1e0>
 7c8:	f5 01       	movw	r30, r10
 7ca:	20 81       	ld	r18, Z
 7cc:	31 81       	ldd	r19, Z+1	; 0x01
 7ce:	42 81       	ldd	r20, Z+2	; 0x02
 7d0:	53 81       	ldd	r21, Z+3	; 0x03
 7d2:	84 e0       	ldi	r24, 0x04	; 4
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	0a c0       	rjmp	.+20     	; 0x7ec <vfprintf+0x1f4>
 7d8:	f5 01       	movw	r30, r10
 7da:	80 81       	ld	r24, Z
 7dc:	91 81       	ldd	r25, Z+1	; 0x01
 7de:	9c 01       	movw	r18, r24
 7e0:	44 27       	eor	r20, r20
 7e2:	37 fd       	sbrc	r19, 7
 7e4:	40 95       	com	r20
 7e6:	54 2f       	mov	r21, r20
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	a8 0e       	add	r10, r24
 7ee:	b9 1e       	adc	r11, r25
 7f0:	9f e6       	ldi	r25, 0x6F	; 111
 7f2:	f9 22       	and	r15, r25
 7f4:	57 ff       	sbrs	r21, 7
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <vfprintf+0x212>
 7f8:	50 95       	com	r21
 7fa:	40 95       	com	r20
 7fc:	30 95       	com	r19
 7fe:	21 95       	neg	r18
 800:	3f 4f       	sbci	r19, 0xFF	; 255
 802:	4f 4f       	sbci	r20, 0xFF	; 255
 804:	5f 4f       	sbci	r21, 0xFF	; 255
 806:	e0 e8       	ldi	r30, 0x80	; 128
 808:	fe 2a       	or	r15, r30
 80a:	ca 01       	movw	r24, r20
 80c:	b9 01       	movw	r22, r18
 80e:	a1 01       	movw	r20, r2
 810:	2a e0       	ldi	r18, 0x0A	; 10
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	01 d1       	rcall	.+514    	; 0xa18 <__ultoa_invert>
 816:	d8 2e       	mov	r13, r24
 818:	d2 18       	sub	r13, r2
 81a:	3f c0       	rjmp	.+126    	; 0x89a <vfprintf+0x2a2>
 81c:	95 37       	cpi	r25, 0x75	; 117
 81e:	29 f4       	brne	.+10     	; 0x82a <vfprintf+0x232>
 820:	1f 2d       	mov	r17, r15
 822:	1f 7e       	andi	r17, 0xEF	; 239
 824:	2a e0       	ldi	r18, 0x0A	; 10
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	1d c0       	rjmp	.+58     	; 0x864 <vfprintf+0x26c>
 82a:	1f 2d       	mov	r17, r15
 82c:	19 7f       	andi	r17, 0xF9	; 249
 82e:	9f 36       	cpi	r25, 0x6F	; 111
 830:	61 f0       	breq	.+24     	; 0x84a <vfprintf+0x252>
 832:	90 37       	cpi	r25, 0x70	; 112
 834:	20 f4       	brcc	.+8      	; 0x83e <vfprintf+0x246>
 836:	98 35       	cpi	r25, 0x58	; 88
 838:	09 f0       	breq	.+2      	; 0x83c <vfprintf+0x244>
 83a:	a5 c0       	rjmp	.+330    	; 0x986 <vfprintf+0x38e>
 83c:	0f c0       	rjmp	.+30     	; 0x85c <vfprintf+0x264>
 83e:	90 37       	cpi	r25, 0x70	; 112
 840:	39 f0       	breq	.+14     	; 0x850 <vfprintf+0x258>
 842:	98 37       	cpi	r25, 0x78	; 120
 844:	09 f0       	breq	.+2      	; 0x848 <vfprintf+0x250>
 846:	9f c0       	rjmp	.+318    	; 0x986 <vfprintf+0x38e>
 848:	04 c0       	rjmp	.+8      	; 0x852 <vfprintf+0x25a>
 84a:	28 e0       	ldi	r18, 0x08	; 8
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	0a c0       	rjmp	.+20     	; 0x864 <vfprintf+0x26c>
 850:	10 61       	ori	r17, 0x10	; 16
 852:	14 fd       	sbrc	r17, 4
 854:	14 60       	ori	r17, 0x04	; 4
 856:	20 e1       	ldi	r18, 0x10	; 16
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	04 c0       	rjmp	.+8      	; 0x864 <vfprintf+0x26c>
 85c:	14 fd       	sbrc	r17, 4
 85e:	16 60       	ori	r17, 0x06	; 6
 860:	20 e1       	ldi	r18, 0x10	; 16
 862:	32 e0       	ldi	r19, 0x02	; 2
 864:	17 ff       	sbrs	r17, 7
 866:	08 c0       	rjmp	.+16     	; 0x878 <vfprintf+0x280>
 868:	f5 01       	movw	r30, r10
 86a:	60 81       	ld	r22, Z
 86c:	71 81       	ldd	r23, Z+1	; 0x01
 86e:	82 81       	ldd	r24, Z+2	; 0x02
 870:	93 81       	ldd	r25, Z+3	; 0x03
 872:	44 e0       	ldi	r20, 0x04	; 4
 874:	50 e0       	ldi	r21, 0x00	; 0
 876:	08 c0       	rjmp	.+16     	; 0x888 <vfprintf+0x290>
 878:	f5 01       	movw	r30, r10
 87a:	80 81       	ld	r24, Z
 87c:	91 81       	ldd	r25, Z+1	; 0x01
 87e:	bc 01       	movw	r22, r24
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	42 e0       	ldi	r20, 0x02	; 2
 886:	50 e0       	ldi	r21, 0x00	; 0
 888:	a4 0e       	add	r10, r20
 88a:	b5 1e       	adc	r11, r21
 88c:	a1 01       	movw	r20, r2
 88e:	c4 d0       	rcall	.+392    	; 0xa18 <__ultoa_invert>
 890:	d8 2e       	mov	r13, r24
 892:	d2 18       	sub	r13, r2
 894:	8f e7       	ldi	r24, 0x7F	; 127
 896:	f8 2e       	mov	r15, r24
 898:	f1 22       	and	r15, r17
 89a:	f6 fe       	sbrs	r15, 6
 89c:	0b c0       	rjmp	.+22     	; 0x8b4 <vfprintf+0x2bc>
 89e:	5e ef       	ldi	r21, 0xFE	; 254
 8a0:	f5 22       	and	r15, r21
 8a2:	d9 14       	cp	r13, r9
 8a4:	38 f4       	brcc	.+14     	; 0x8b4 <vfprintf+0x2bc>
 8a6:	f4 fe       	sbrs	r15, 4
 8a8:	07 c0       	rjmp	.+14     	; 0x8b8 <vfprintf+0x2c0>
 8aa:	f2 fc       	sbrc	r15, 2
 8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <vfprintf+0x2c0>
 8ae:	8f ee       	ldi	r24, 0xEF	; 239
 8b0:	f8 22       	and	r15, r24
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <vfprintf+0x2c0>
 8b4:	1d 2d       	mov	r17, r13
 8b6:	01 c0       	rjmp	.+2      	; 0x8ba <vfprintf+0x2c2>
 8b8:	19 2d       	mov	r17, r9
 8ba:	f4 fe       	sbrs	r15, 4
 8bc:	0d c0       	rjmp	.+26     	; 0x8d8 <vfprintf+0x2e0>
 8be:	fe 01       	movw	r30, r28
 8c0:	ed 0d       	add	r30, r13
 8c2:	f1 1d       	adc	r31, r1
 8c4:	80 81       	ld	r24, Z
 8c6:	80 33       	cpi	r24, 0x30	; 48
 8c8:	19 f4       	brne	.+6      	; 0x8d0 <vfprintf+0x2d8>
 8ca:	99 ee       	ldi	r25, 0xE9	; 233
 8cc:	f9 22       	and	r15, r25
 8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <vfprintf+0x2e8>
 8d0:	1f 5f       	subi	r17, 0xFF	; 255
 8d2:	f2 fe       	sbrs	r15, 2
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <vfprintf+0x2e8>
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <vfprintf+0x2e6>
 8d8:	8f 2d       	mov	r24, r15
 8da:	86 78       	andi	r24, 0x86	; 134
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <vfprintf+0x2e8>
 8de:	1f 5f       	subi	r17, 0xFF	; 255
 8e0:	0f 2d       	mov	r16, r15
 8e2:	f3 fc       	sbrc	r15, 3
 8e4:	13 c0       	rjmp	.+38     	; 0x90c <vfprintf+0x314>
 8e6:	f0 fe       	sbrs	r15, 0
 8e8:	0e c0       	rjmp	.+28     	; 0x906 <vfprintf+0x30e>
 8ea:	1e 15       	cp	r17, r14
 8ec:	10 f0       	brcs	.+4      	; 0x8f2 <vfprintf+0x2fa>
 8ee:	9d 2c       	mov	r9, r13
 8f0:	0a c0       	rjmp	.+20     	; 0x906 <vfprintf+0x30e>
 8f2:	9d 2c       	mov	r9, r13
 8f4:	9e 0c       	add	r9, r14
 8f6:	91 1a       	sub	r9, r17
 8f8:	1e 2d       	mov	r17, r14
 8fa:	05 c0       	rjmp	.+10     	; 0x906 <vfprintf+0x30e>
 8fc:	80 e2       	ldi	r24, 0x20	; 32
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	b3 01       	movw	r22, r6
 902:	5e d0       	rcall	.+188    	; 0x9c0 <fputc>
 904:	1f 5f       	subi	r17, 0xFF	; 255
 906:	1e 15       	cp	r17, r14
 908:	c8 f3       	brcs	.-14     	; 0x8fc <vfprintf+0x304>
 90a:	04 c0       	rjmp	.+8      	; 0x914 <vfprintf+0x31c>
 90c:	1e 15       	cp	r17, r14
 90e:	10 f4       	brcc	.+4      	; 0x914 <vfprintf+0x31c>
 910:	e1 1a       	sub	r14, r17
 912:	01 c0       	rjmp	.+2      	; 0x916 <vfprintf+0x31e>
 914:	ee 24       	eor	r14, r14
 916:	04 ff       	sbrs	r16, 4
 918:	0e c0       	rjmp	.+28     	; 0x936 <vfprintf+0x33e>
 91a:	80 e3       	ldi	r24, 0x30	; 48
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	b3 01       	movw	r22, r6
 920:	4f d0       	rcall	.+158    	; 0x9c0 <fputc>
 922:	02 ff       	sbrs	r16, 2
 924:	1b c0       	rjmp	.+54     	; 0x95c <vfprintf+0x364>
 926:	01 fd       	sbrc	r16, 1
 928:	03 c0       	rjmp	.+6      	; 0x930 <vfprintf+0x338>
 92a:	88 e7       	ldi	r24, 0x78	; 120
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	0e c0       	rjmp	.+28     	; 0x94c <vfprintf+0x354>
 930:	88 e5       	ldi	r24, 0x58	; 88
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0b c0       	rjmp	.+22     	; 0x94c <vfprintf+0x354>
 936:	80 2f       	mov	r24, r16
 938:	86 78       	andi	r24, 0x86	; 134
 93a:	81 f0       	breq	.+32     	; 0x95c <vfprintf+0x364>
 93c:	01 ff       	sbrs	r16, 1
 93e:	02 c0       	rjmp	.+4      	; 0x944 <vfprintf+0x34c>
 940:	8b e2       	ldi	r24, 0x2B	; 43
 942:	01 c0       	rjmp	.+2      	; 0x946 <vfprintf+0x34e>
 944:	80 e2       	ldi	r24, 0x20	; 32
 946:	f7 fc       	sbrc	r15, 7
 948:	8d e2       	ldi	r24, 0x2D	; 45
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	b3 01       	movw	r22, r6
 94e:	38 d0       	rcall	.+112    	; 0x9c0 <fputc>
 950:	05 c0       	rjmp	.+10     	; 0x95c <vfprintf+0x364>
 952:	80 e3       	ldi	r24, 0x30	; 48
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	b3 01       	movw	r22, r6
 958:	33 d0       	rcall	.+102    	; 0x9c0 <fputc>
 95a:	9a 94       	dec	r9
 95c:	d9 14       	cp	r13, r9
 95e:	c8 f3       	brcs	.-14     	; 0x952 <vfprintf+0x35a>
 960:	da 94       	dec	r13
 962:	f1 01       	movw	r30, r2
 964:	ed 0d       	add	r30, r13
 966:	f1 1d       	adc	r31, r1
 968:	80 81       	ld	r24, Z
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	b3 01       	movw	r22, r6
 96e:	28 d0       	rcall	.+80     	; 0x9c0 <fputc>
 970:	dd 20       	and	r13, r13
 972:	b1 f7       	brne	.-20     	; 0x960 <vfprintf+0x368>
 974:	05 c0       	rjmp	.+10     	; 0x980 <vfprintf+0x388>
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	b3 01       	movw	r22, r6
 97c:	21 d0       	rcall	.+66     	; 0x9c0 <fputc>
 97e:	ea 94       	dec	r14
 980:	ee 20       	and	r14, r14
 982:	c9 f7       	brne	.-14     	; 0x976 <vfprintf+0x37e>
 984:	50 ce       	rjmp	.-864    	; 0x626 <vfprintf+0x2e>
 986:	f3 01       	movw	r30, r6
 988:	66 81       	ldd	r22, Z+6	; 0x06
 98a:	77 81       	ldd	r23, Z+7	; 0x07
 98c:	cb 01       	movw	r24, r22
 98e:	2b 96       	adiw	r28, 0x0b	; 11
 990:	e2 e1       	ldi	r30, 0x12	; 18
 992:	e3 c0       	rjmp	.+454    	; 0xb5a <__epilogue_restores__>

00000994 <strnlen_P>:
 994:	fc 01       	movw	r30, r24
 996:	05 90       	lpm	r0, Z+
 998:	61 50       	subi	r22, 0x01	; 1
 99a:	70 40       	sbci	r23, 0x00	; 0
 99c:	01 10       	cpse	r0, r1
 99e:	d8 f7       	brcc	.-10     	; 0x996 <strnlen_P+0x2>
 9a0:	80 95       	com	r24
 9a2:	90 95       	com	r25
 9a4:	8e 0f       	add	r24, r30
 9a6:	9f 1f       	adc	r25, r31
 9a8:	08 95       	ret

000009aa <strnlen>:
 9aa:	fc 01       	movw	r30, r24
 9ac:	61 50       	subi	r22, 0x01	; 1
 9ae:	70 40       	sbci	r23, 0x00	; 0
 9b0:	01 90       	ld	r0, Z+
 9b2:	01 10       	cpse	r0, r1
 9b4:	d8 f7       	brcc	.-10     	; 0x9ac <strnlen+0x2>
 9b6:	80 95       	com	r24
 9b8:	90 95       	com	r25
 9ba:	8e 0f       	add	r24, r30
 9bc:	9f 1f       	adc	r25, r31
 9be:	08 95       	ret

000009c0 <fputc>:
 9c0:	0f 93       	push	r16
 9c2:	1f 93       	push	r17
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	8c 01       	movw	r16, r24
 9ca:	eb 01       	movw	r28, r22
 9cc:	8b 81       	ldd	r24, Y+3	; 0x03
 9ce:	81 ff       	sbrs	r24, 1
 9d0:	1b c0       	rjmp	.+54     	; 0xa08 <fputc+0x48>
 9d2:	82 ff       	sbrs	r24, 2
 9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <fputc+0x30>
 9d6:	2e 81       	ldd	r18, Y+6	; 0x06
 9d8:	3f 81       	ldd	r19, Y+7	; 0x07
 9da:	8c 81       	ldd	r24, Y+4	; 0x04
 9dc:	9d 81       	ldd	r25, Y+5	; 0x05
 9de:	28 17       	cp	r18, r24
 9e0:	39 07       	cpc	r19, r25
 9e2:	64 f4       	brge	.+24     	; 0x9fc <fputc+0x3c>
 9e4:	e8 81       	ld	r30, Y
 9e6:	f9 81       	ldd	r31, Y+1	; 0x01
 9e8:	01 93       	st	Z+, r16
 9ea:	f9 83       	std	Y+1, r31	; 0x01
 9ec:	e8 83       	st	Y, r30
 9ee:	06 c0       	rjmp	.+12     	; 0x9fc <fputc+0x3c>
 9f0:	e8 85       	ldd	r30, Y+8	; 0x08
 9f2:	f9 85       	ldd	r31, Y+9	; 0x09
 9f4:	80 2f       	mov	r24, r16
 9f6:	09 95       	icall
 9f8:	89 2b       	or	r24, r25
 9fa:	31 f4       	brne	.+12     	; 0xa08 <fputc+0x48>
 9fc:	8e 81       	ldd	r24, Y+6	; 0x06
 9fe:	9f 81       	ldd	r25, Y+7	; 0x07
 a00:	01 96       	adiw	r24, 0x01	; 1
 a02:	9f 83       	std	Y+7, r25	; 0x07
 a04:	8e 83       	std	Y+6, r24	; 0x06
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <fputc+0x4c>
 a08:	0f ef       	ldi	r16, 0xFF	; 255
 a0a:	1f ef       	ldi	r17, 0xFF	; 255
 a0c:	c8 01       	movw	r24, r16
 a0e:	df 91       	pop	r29
 a10:	cf 91       	pop	r28
 a12:	1f 91       	pop	r17
 a14:	0f 91       	pop	r16
 a16:	08 95       	ret

00000a18 <__ultoa_invert>:
 a18:	fa 01       	movw	r30, r20
 a1a:	aa 27       	eor	r26, r26
 a1c:	28 30       	cpi	r18, 0x08	; 8
 a1e:	51 f1       	breq	.+84     	; 0xa74 <__ultoa_invert+0x5c>
 a20:	20 31       	cpi	r18, 0x10	; 16
 a22:	81 f1       	breq	.+96     	; 0xa84 <__ultoa_invert+0x6c>
 a24:	e8 94       	clt
 a26:	6f 93       	push	r22
 a28:	6e 7f       	andi	r22, 0xFE	; 254
 a2a:	6e 5f       	subi	r22, 0xFE	; 254
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	af 4f       	sbci	r26, 0xFF	; 255
 a34:	b1 e0       	ldi	r27, 0x01	; 1
 a36:	3e d0       	rcall	.+124    	; 0xab4 <__ultoa_invert+0x9c>
 a38:	b4 e0       	ldi	r27, 0x04	; 4
 a3a:	3c d0       	rcall	.+120    	; 0xab4 <__ultoa_invert+0x9c>
 a3c:	67 0f       	add	r22, r23
 a3e:	78 1f       	adc	r23, r24
 a40:	89 1f       	adc	r24, r25
 a42:	9a 1f       	adc	r25, r26
 a44:	a1 1d       	adc	r26, r1
 a46:	68 0f       	add	r22, r24
 a48:	79 1f       	adc	r23, r25
 a4a:	8a 1f       	adc	r24, r26
 a4c:	91 1d       	adc	r25, r1
 a4e:	a1 1d       	adc	r26, r1
 a50:	6a 0f       	add	r22, r26
 a52:	71 1d       	adc	r23, r1
 a54:	81 1d       	adc	r24, r1
 a56:	91 1d       	adc	r25, r1
 a58:	a1 1d       	adc	r26, r1
 a5a:	20 d0       	rcall	.+64     	; 0xa9c <__ultoa_invert+0x84>
 a5c:	09 f4       	brne	.+2      	; 0xa60 <__ultoa_invert+0x48>
 a5e:	68 94       	set
 a60:	3f 91       	pop	r19
 a62:	2a e0       	ldi	r18, 0x0A	; 10
 a64:	26 9f       	mul	r18, r22
 a66:	11 24       	eor	r1, r1
 a68:	30 19       	sub	r19, r0
 a6a:	30 5d       	subi	r19, 0xD0	; 208
 a6c:	31 93       	st	Z+, r19
 a6e:	de f6       	brtc	.-74     	; 0xa26 <__ultoa_invert+0xe>
 a70:	cf 01       	movw	r24, r30
 a72:	08 95       	ret
 a74:	46 2f       	mov	r20, r22
 a76:	47 70       	andi	r20, 0x07	; 7
 a78:	40 5d       	subi	r20, 0xD0	; 208
 a7a:	41 93       	st	Z+, r20
 a7c:	b3 e0       	ldi	r27, 0x03	; 3
 a7e:	0f d0       	rcall	.+30     	; 0xa9e <__ultoa_invert+0x86>
 a80:	c9 f7       	brne	.-14     	; 0xa74 <__ultoa_invert+0x5c>
 a82:	f6 cf       	rjmp	.-20     	; 0xa70 <__ultoa_invert+0x58>
 a84:	46 2f       	mov	r20, r22
 a86:	4f 70       	andi	r20, 0x0F	; 15
 a88:	40 5d       	subi	r20, 0xD0	; 208
 a8a:	4a 33       	cpi	r20, 0x3A	; 58
 a8c:	18 f0       	brcs	.+6      	; 0xa94 <__ultoa_invert+0x7c>
 a8e:	49 5d       	subi	r20, 0xD9	; 217
 a90:	31 fd       	sbrc	r19, 1
 a92:	40 52       	subi	r20, 0x20	; 32
 a94:	41 93       	st	Z+, r20
 a96:	02 d0       	rcall	.+4      	; 0xa9c <__ultoa_invert+0x84>
 a98:	a9 f7       	brne	.-22     	; 0xa84 <__ultoa_invert+0x6c>
 a9a:	ea cf       	rjmp	.-44     	; 0xa70 <__ultoa_invert+0x58>
 a9c:	b4 e0       	ldi	r27, 0x04	; 4
 a9e:	a6 95       	lsr	r26
 aa0:	97 95       	ror	r25
 aa2:	87 95       	ror	r24
 aa4:	77 95       	ror	r23
 aa6:	67 95       	ror	r22
 aa8:	ba 95       	dec	r27
 aaa:	c9 f7       	brne	.-14     	; 0xa9e <__ultoa_invert+0x86>
 aac:	00 97       	sbiw	r24, 0x00	; 0
 aae:	61 05       	cpc	r22, r1
 ab0:	71 05       	cpc	r23, r1
 ab2:	08 95       	ret
 ab4:	9b 01       	movw	r18, r22
 ab6:	ac 01       	movw	r20, r24
 ab8:	0a 2e       	mov	r0, r26
 aba:	06 94       	lsr	r0
 abc:	57 95       	ror	r21
 abe:	47 95       	ror	r20
 ac0:	37 95       	ror	r19
 ac2:	27 95       	ror	r18
 ac4:	ba 95       	dec	r27
 ac6:	c9 f7       	brne	.-14     	; 0xaba <__ultoa_invert+0xa2>
 ac8:	62 0f       	add	r22, r18
 aca:	73 1f       	adc	r23, r19
 acc:	84 1f       	adc	r24, r20
 ace:	95 1f       	adc	r25, r21
 ad0:	a0 1d       	adc	r26, r0
 ad2:	08 95       	ret

00000ad4 <__udivmodhi4>:
 ad4:	aa 1b       	sub	r26, r26
 ad6:	bb 1b       	sub	r27, r27
 ad8:	51 e1       	ldi	r21, 0x11	; 17
 ada:	07 c0       	rjmp	.+14     	; 0xaea <__udivmodhi4_ep>

00000adc <__udivmodhi4_loop>:
 adc:	aa 1f       	adc	r26, r26
 ade:	bb 1f       	adc	r27, r27
 ae0:	a6 17       	cp	r26, r22
 ae2:	b7 07       	cpc	r27, r23
 ae4:	10 f0       	brcs	.+4      	; 0xaea <__udivmodhi4_ep>
 ae6:	a6 1b       	sub	r26, r22
 ae8:	b7 0b       	sbc	r27, r23

00000aea <__udivmodhi4_ep>:
 aea:	88 1f       	adc	r24, r24
 aec:	99 1f       	adc	r25, r25
 aee:	5a 95       	dec	r21
 af0:	a9 f7       	brne	.-22     	; 0xadc <__udivmodhi4_loop>
 af2:	80 95       	com	r24
 af4:	90 95       	com	r25
 af6:	bc 01       	movw	r22, r24
 af8:	cd 01       	movw	r24, r26
 afa:	08 95       	ret

00000afc <__divmodhi4>:
 afc:	97 fb       	bst	r25, 7
 afe:	09 2e       	mov	r0, r25
 b00:	07 26       	eor	r0, r23
 b02:	0a d0       	rcall	.+20     	; 0xb18 <__divmodhi4_neg1>
 b04:	77 fd       	sbrc	r23, 7
 b06:	04 d0       	rcall	.+8      	; 0xb10 <__divmodhi4_neg2>
 b08:	e5 df       	rcall	.-54     	; 0xad4 <__udivmodhi4>
 b0a:	06 d0       	rcall	.+12     	; 0xb18 <__divmodhi4_neg1>
 b0c:	00 20       	and	r0, r0
 b0e:	1a f4       	brpl	.+6      	; 0xb16 <__divmodhi4_exit>

00000b10 <__divmodhi4_neg2>:
 b10:	70 95       	com	r23
 b12:	61 95       	neg	r22
 b14:	7f 4f       	sbci	r23, 0xFF	; 255

00000b16 <__divmodhi4_exit>:
 b16:	08 95       	ret

00000b18 <__divmodhi4_neg1>:
 b18:	f6 f7       	brtc	.-4      	; 0xb16 <__divmodhi4_exit>
 b1a:	90 95       	com	r25
 b1c:	81 95       	neg	r24
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__prologue_saves__>:
 b22:	2f 92       	push	r2
 b24:	3f 92       	push	r3
 b26:	4f 92       	push	r4
 b28:	5f 92       	push	r5
 b2a:	6f 92       	push	r6
 b2c:	7f 92       	push	r7
 b2e:	8f 92       	push	r8
 b30:	9f 92       	push	r9
 b32:	af 92       	push	r10
 b34:	bf 92       	push	r11
 b36:	cf 92       	push	r12
 b38:	df 92       	push	r13
 b3a:	ef 92       	push	r14
 b3c:	ff 92       	push	r15
 b3e:	0f 93       	push	r16
 b40:	1f 93       	push	r17
 b42:	cf 93       	push	r28
 b44:	df 93       	push	r29
 b46:	cd b7       	in	r28, 0x3d	; 61
 b48:	de b7       	in	r29, 0x3e	; 62
 b4a:	ca 1b       	sub	r28, r26
 b4c:	db 0b       	sbc	r29, r27
 b4e:	0f b6       	in	r0, 0x3f	; 63
 b50:	f8 94       	cli
 b52:	de bf       	out	0x3e, r29	; 62
 b54:	0f be       	out	0x3f, r0	; 63
 b56:	cd bf       	out	0x3d, r28	; 61
 b58:	09 94       	ijmp

00000b5a <__epilogue_restores__>:
 b5a:	2a 88       	ldd	r2, Y+18	; 0x12
 b5c:	39 88       	ldd	r3, Y+17	; 0x11
 b5e:	48 88       	ldd	r4, Y+16	; 0x10
 b60:	5f 84       	ldd	r5, Y+15	; 0x0f
 b62:	6e 84       	ldd	r6, Y+14	; 0x0e
 b64:	7d 84       	ldd	r7, Y+13	; 0x0d
 b66:	8c 84       	ldd	r8, Y+12	; 0x0c
 b68:	9b 84       	ldd	r9, Y+11	; 0x0b
 b6a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b6c:	b9 84       	ldd	r11, Y+9	; 0x09
 b6e:	c8 84       	ldd	r12, Y+8	; 0x08
 b70:	df 80       	ldd	r13, Y+7	; 0x07
 b72:	ee 80       	ldd	r14, Y+6	; 0x06
 b74:	fd 80       	ldd	r15, Y+5	; 0x05
 b76:	0c 81       	ldd	r16, Y+4	; 0x04
 b78:	1b 81       	ldd	r17, Y+3	; 0x03
 b7a:	aa 81       	ldd	r26, Y+2	; 0x02
 b7c:	b9 81       	ldd	r27, Y+1	; 0x01
 b7e:	ce 0f       	add	r28, r30
 b80:	d1 1d       	adc	r29, r1
 b82:	0f b6       	in	r0, 0x3f	; 63
 b84:	f8 94       	cli
 b86:	de bf       	out	0x3e, r29	; 62
 b88:	0f be       	out	0x3f, r0	; 63
 b8a:	cd bf       	out	0x3d, r28	; 61
 b8c:	ed 01       	movw	r28, r26
 b8e:	08 95       	ret

00000b90 <_exit>:
 b90:	f8 94       	cli

00000b92 <__stop_program>:
 b92:	ff cf       	rjmp	.-2      	; 0xb92 <__stop_program>
