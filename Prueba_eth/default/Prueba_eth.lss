
Prueba_eth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000008ea  0000097e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  0080013e  0080013e  000009bc  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000258  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a58  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000414  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c76  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000738  00000000  00000000  00002c91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea ee       	ldi	r30, 0xEA	; 234
  48:	f8 e0       	ldi	r31, 0x08	; 8
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	ae 33       	cpi	r26, 0x3E	; 62
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	12 e0       	ldi	r17, 0x02	; 2
  58:	ae e3       	ldi	r26, 0x3E	; 62
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a6 34       	cpi	r26, 0x46	; 70
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	0e d0       	rcall	.+28     	; 0x84 <main>
  68:	3e c4       	rjmp	.+2172   	; 0x8e6 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <verify_password>:
// the password string (only the first 5 char checked):
static char password[]="secret";

// 
uint8_t verify_password(char *str)
{
  6c:	bc 01       	movw	r22, r24
        // the first characters of the received string are
        // a simple password/cookie:
        if (strncmp(password,str,5)==0){
  6e:	86 e3       	ldi	r24, 0x36	; 54
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	45 e0       	ldi	r20, 0x05	; 5
  74:	50 e0       	ldi	r21, 0x00	; 0
  76:	29 d4       	rcall	.+2130   	; 0x8ca <strncmp>
  78:	9c 01       	movw	r18, r24
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	23 2b       	or	r18, r19
  7e:	09 f4       	brne	.+2      	; 0x82 <verify_password+0x16>
  80:	81 e0       	ldi	r24, 0x01	; 1
                return(1);
        }
        return(0);
}
  82:	08 95       	ret

00000084 <main>:

int main(void){
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	df 93       	push	r29
  90:	cf 93       	push	r28
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	6e 97       	sbiw	r28, 0x1e	; 30
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	f8 94       	cli
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	cd bf       	out	0x3d, r28	; 61
        char cmdval;
        
        // set the clock speed to 8MHz
        // set the clock prescaler. First write CLKPCE to enable setting of clock the
        // next four instructions.
        CLKPR=(1<<CLKPCE);
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	80 93 61 00 	sts	0x0061, r24
        CLKPR=0; // 8 MHZ
  a8:	10 92 61 00 	sts	0x0061, r1
        delay_ms(10);
  ac:	8a e0       	ldi	r24, 0x0A	; 10
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	ed d3       	rcall	.+2010   	; 0x88c <delay_ms>
        
        /* enable PB0, reset as output */
        DDRB|= (1<<DDB0);
  b2:	20 9a       	sbi	0x04, 0	; 4

        /* enable PD2/INT0, as input */
        DDRD&= ~(1<<DDD2);
  b4:	52 98       	cbi	0x0a, 2	; 10

        /* set output to gnd, reset the ethernet chip */
        PORTB &= ~(1<<PB0);
  b6:	28 98       	cbi	0x05, 0	; 5
        delay_ms(10);
  b8:	8a e0       	ldi	r24, 0x0A	; 10
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	e7 d3       	rcall	.+1998   	; 0x88c <delay_ms>
        /* set output to Vcc, reset inactive */
        PORTB|= (1<<PB0);
  be:	28 9a       	sbi	0x05, 0	; 5
        delay_ms(200);
  c0:	88 ec       	ldi	r24, 0xC8	; 200
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	e3 d3       	rcall	.+1990   	; 0x88c <delay_ms>
        
        /*initialize enc28j60*/
        enc28j60Init(mymac);
  c6:	8c e2       	ldi	r24, 0x2C	; 44
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	eb d1       	rcall	.+982    	; 0x4a2 <enc28j60Init>
        delay_ms(20);
  cc:	84 e1       	ldi	r24, 0x14	; 20
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	dd d3       	rcall	.+1978   	; 0x88c <delay_ms>
        
        // LED
        /* enable PB1, LED as output */
        DDRB|= (1<<DDB1);
  d2:	21 9a       	sbi	0x04, 1	; 4

        /* set output to Vcc, LED off */
        PORTB|= (1<<PB1);
  d4:	29 9a       	sbi	0x05, 1	; 5

        // the transistor on PD7
        DDRD|= (1<<DDD7);
  d6:	57 9a       	sbi	0x0a, 7	; 10
        PORTD &= ~(1<<PD7);// transistor off
  d8:	5f 98       	cbi	0x0b, 7	; 11
        /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
        // LEDB=yellow LEDA=green
        //
        // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
        // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
        enc28j60PhyWrite(PHLCON,0x476);
  da:	84 e1       	ldi	r24, 0x14	; 20
  dc:	66 e7       	ldi	r22, 0x76	; 118
  de:	74 e0       	ldi	r23, 0x04	; 4
  e0:	28 d1       	rcall	.+592    	; 0x332 <enc28j60PhyWrite>
        delay_ms(20);
  e2:	84 e1       	ldi	r24, 0x14	; 20
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	d2 d3       	rcall	.+1956   	; 0x88c <delay_ms>
        
        /* set output to GND, red LED on */
        PORTB &= ~(1<<PB1);
  e8:	29 98       	cbi	0x05, 1	; 5
        i=1;

        //init the ethernet/ip layer:
        init_ip_arp_udp(mymac,myip);
  ea:	8c e2       	ldi	r24, 0x2C	; 44
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	62 e3       	ldi	r22, 0x32	; 50
  f0:	71 e0       	ldi	r23, 0x01	; 1
  f2:	c2 d2       	rcall	.+1412   	; 0x678 <init_ip_arp_udp>
  f4:	dd 24       	eor	r13, r13
  f6:	d3 94       	inc	r13
                                strcpy(str,"e=no_such_cmd");
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),myport);
  f8:	7e 01       	movw	r14, r28
  fa:	08 94       	sec
  fc:	e1 1c       	adc	r14, r1
  fe:	f1 1c       	adc	r15, r1
        //init the ethernet/ip layer:
        init_ip_arp_udp(mymac,myip);

        while(1){
                // get the next new packet:
                plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
 100:	8a ef       	ldi	r24, 0xFA	; 250
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	6e e3       	ldi	r22, 0x3E	; 62
 106:	71 e0       	ldi	r23, 0x01	; 1
 108:	5f d1       	rcall	.+702    	; 0x3c8 <enc28j60PacketReceive>
 10a:	8c 01       	movw	r16, r24

                /*plen will ne unequal to zero if there is a valid 
                 * packet (without crc error) */
                if(plen==0){
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	c1 f3       	breq	.-16     	; 0x100 <main+0x7c>
                        continue;
                }
                // led----------
                if (i){
 110:	dd 20       	and	r13, r13
 112:	19 f0       	breq	.+6      	; 0x11a <main+0x96>
                        /* set output to Vcc, LED off */
                        PORTB|= (1<<PB1);
 114:	29 9a       	sbi	0x05, 1	; 5
 116:	dd 24       	eor	r13, r13
 118:	03 c0       	rjmp	.+6      	; 0x120 <main+0x9c>
                        i=0;
                }else{
                        /* set output to GND, LED on */
                        PORTB &= ~(1<<PB1);
 11a:	29 98       	cbi	0x05, 1	; 5
 11c:	dd 24       	eor	r13, r13
 11e:	d3 94       	inc	r13
                }
                        
                // arp is broadcast if unknown but a host may also
                // verify the mac address by sending it to 
                // a unicast address.
                if(eth_type_is_arp_and_my_ip(buf,plen)){
 120:	8e e3       	ldi	r24, 0x3E	; 62
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	60 2f       	mov	r22, r16
 126:	c8 d2       	rcall	.+1424   	; 0x6b8 <eth_type_is_arp_and_my_ip>
 128:	88 23       	and	r24, r24
 12a:	29 f0       	breq	.+10     	; 0x136 <main+0xb2>
                        make_arp_answer_from_request(buf,plen);
 12c:	8e e3       	ldi	r24, 0x3E	; 62
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	60 2f       	mov	r22, r16
 132:	86 d3       	rcall	.+1804   	; 0x840 <make_arp_answer_from_request>
 134:	e5 cf       	rjmp	.-54     	; 0x100 <main+0x7c>
                        continue;
                }
                // check if ip packets (icmp or udp) are for us:
                if(eth_type_is_ip_and_my_ip(buf,plen)==0){
 136:	8e e3       	ldi	r24, 0x3E	; 62
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	60 2f       	mov	r22, r16
 13c:	d8 d2       	rcall	.+1456   	; 0x6ee <eth_type_is_ip_and_my_ip>
 13e:	88 23       	and	r24, r24
 140:	f9 f2       	breq	.-66     	; 0x100 <main+0x7c>
                        continue;
                }
                
                if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
 142:	80 91 55 01 	lds	r24, 0x0155
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	49 f4       	brne	.+18     	; 0x15c <main+0xd8>
 14a:	80 91 60 01 	lds	r24, 0x0160
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	b9 f6       	brne	.-82     	; 0x100 <main+0x7c>
                        // a ping packet, let's send pong
                        make_echo_reply_from_request(buf,plen);
 152:	8e e3       	ldi	r24, 0x3E	; 62
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	60 2f       	mov	r22, r16
 158:	59 d3       	rcall	.+1714   	; 0x80c <make_echo_reply_from_request>
 15a:	d2 cf       	rjmp	.-92     	; 0x100 <main+0x7c>
                        continue;
                }
                // we listen on port 1200=0x4B0
                if (buf[IP_PROTO_P]==IP_PROTO_UDP_V&&buf[UDP_DST_PORT_H_P]==4&&buf[UDP_DST_PORT_L_P]==0xb0){
 15c:	81 31       	cpi	r24, 0x11	; 17
 15e:	81 f6       	brne	.-96     	; 0x100 <main+0x7c>
 160:	80 91 62 01 	lds	r24, 0x0162
 164:	84 30       	cpi	r24, 0x04	; 4
 166:	61 f6       	brne	.-104    	; 0x100 <main+0x7c>
 168:	80 91 63 01 	lds	r24, 0x0163
 16c:	80 3b       	cpi	r24, 0xB0	; 176
 16e:	41 f6       	brne	.-112    	; 0x100 <main+0x7c>
                        payloadlen=buf[UDP_LEN_L_P]-UDP_HEADER_LEN;
 170:	10 91 65 01 	lds	r17, 0x0165
 174:	18 50       	subi	r17, 0x08	; 8
                        // you must sent a string starting with v
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
 176:	88 e6       	ldi	r24, 0x68	; 104
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	78 df       	rcall	.-272    	; 0x6c <verify_password>
 17c:	88 23       	and	r24, r24
 17e:	59 f4       	brne	.+22     	; 0x196 <main+0x112>
 180:	3c c0       	rjmp	.+120    	; 0x1fa <main+0x176>
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
                                        cmd_pos++;
 182:	9f 5f       	subi	r25, 0xFF	; 255
                                        if (buf[UDP_DATA_P+cmd_pos]==','){
 184:	e9 2f       	mov	r30, r25
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	e2 5c       	subi	r30, 0xC2	; 194
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	82 a5       	ldd	r24, Z+42	; 0x2a
 18e:	8c 32       	cpi	r24, 0x2C	; 44
 190:	19 f4       	brne	.+6      	; 0x198 <main+0x114>
                                                cmd_pos++; // put on start of cmd
 192:	9f 5f       	subi	r25, 0xFF	; 255
 194:	03 c0       	rjmp	.+6      	; 0x19c <main+0x118>
                                                break;
 196:	90 e0       	ldi	r25, 0x00	; 0
                        // e.g udpcom version 10.0.0.24
                        if (verify_password((char *)&(buf[UDP_DATA_P]))){
                                // find the first comma which indicates 
                                // the start of a command:
                                cmd_pos=0;
                                while(cmd_pos<payloadlen){
 198:	91 17       	cp	r25, r17
 19a:	98 f3       	brcs	.-26     	; 0x182 <main+0xfe>
                                        }
                                }
                                // a command is one char and a value. At
                                // least 3 characters long. It has an '=' on
                                // position 2:
                                if (cmd_pos<2 || cmd_pos>payloadlen-3 || buf[UDP_DATA_P+cmd_pos+1]!='='){
 19c:	92 30       	cpi	r25, 0x02	; 2
 19e:	68 f0       	brcs	.+26     	; 0x1ba <main+0x136>
 1a0:	e9 2f       	mov	r30, r25
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	81 2f       	mov	r24, r17
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 97       	sbiw	r24, 0x02	; 2
 1aa:	e8 17       	cp	r30, r24
 1ac:	f9 07       	cpc	r31, r25
 1ae:	2c f4       	brge	.+10     	; 0x1ba <main+0x136>
 1b0:	e2 5c       	subi	r30, 0xC2	; 194
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	83 a5       	ldd	r24, Z+43	; 0x2b
 1b6:	8d 33       	cpi	r24, 0x3D	; 61
 1b8:	21 f0       	breq	.+8      	; 0x1c2 <main+0x13e>
                                        strcpy(str,"e=no_cmd");
 1ba:	c7 01       	movw	r24, r14
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	71 e0       	ldi	r23, 0x01	; 1
 1c0:	1f c0       	rjmp	.+62     	; 0x200 <main+0x17c>
                                        goto ANSWER;
                                }
                                // supported commands are
                                // t=1 t=0 t=?
                                if (buf[UDP_DATA_P+cmd_pos]=='t'){
 1c2:	82 a5       	ldd	r24, Z+42	; 0x2a
 1c4:	84 37       	cpi	r24, 0x74	; 116
 1c6:	a9 f4       	brne	.+42     	; 0x1f2 <main+0x16e>
                                        cmdval=buf[UDP_DATA_P+cmd_pos+2];
 1c8:	e4 a5       	ldd	r30, Z+44	; 0x2c
                                        if(cmdval=='1'){
 1ca:	e1 33       	cpi	r30, 0x31	; 49
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <main+0x14e>
                                                PORTD|= (1<<PD7);// transistor on
 1ce:	5f 9a       	sbi	0x0b, 7	; 11
 1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <main+0x15e>
                                                strcpy(str,"t=1");
                                                goto ANSWER;
                                        }else if(cmdval=='0'){
 1d2:	e0 33       	cpi	r30, 0x30	; 48
 1d4:	11 f4       	brne	.+4      	; 0x1da <main+0x156>
                                                PORTD &= ~(1<<PD7);// transistor off
 1d6:	5f 98       	cbi	0x0b, 7	; 11
 1d8:	08 c0       	rjmp	.+16     	; 0x1ea <main+0x166>
                                                strcpy(str,"t=0");
                                                goto ANSWER;
                                        }else if(cmdval=='?'){
 1da:	ef 33       	cpi	r30, 0x3F	; 63
 1dc:	51 f4       	brne	.+20     	; 0x1f2 <main+0x16e>
                                                if (PORTD & (1<<PD7)){
 1de:	5f 9b       	sbis	0x0b, 7	; 11
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <main+0x166>
                                                        strcpy(str,"t=1");
 1e2:	c7 01       	movw	r24, r14
 1e4:	69 e0       	ldi	r22, 0x09	; 9
 1e6:	71 e0       	ldi	r23, 0x01	; 1
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <main+0x17c>
                                                        goto ANSWER;
                                                }
                                                strcpy(str,"t=0");
 1ea:	c7 01       	movw	r24, r14
 1ec:	6d e0       	ldi	r22, 0x0D	; 13
 1ee:	71 e0       	ldi	r23, 0x01	; 1
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <main+0x17c>
                                                goto ANSWER;
                                        }
                                }
                                strcpy(str,"e=no_such_cmd");
 1f2:	c7 01       	movw	r24, r14
 1f4:	61 e1       	ldi	r22, 0x11	; 17
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <main+0x17c>
                                goto ANSWER;
                        }
                        strcpy(str,"e=invalid_pw");
 1fa:	c7 01       	movw	r24, r14
 1fc:	6f e1       	ldi	r22, 0x1F	; 31
 1fe:	71 e0       	ldi	r23, 0x01	; 1
 200:	5d d3       	rcall	.+1722   	; 0x8bc <strcpy>
ANSWER:
                        make_udp_reply_from_request(buf,str,strlen(str),myport);
 202:	f7 01       	movw	r30, r14
 204:	01 90       	ld	r0, Z+
 206:	00 20       	and	r0, r0
 208:	e9 f7       	brne	.-6      	; 0x204 <main+0x180>
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	ee 19       	sub	r30, r14
 20e:	ff 09       	sbc	r31, r15
 210:	8e e3       	ldi	r24, 0x3E	; 62
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	b7 01       	movw	r22, r14
 216:	4e 2f       	mov	r20, r30
 218:	20 eb       	ldi	r18, 0xB0	; 176
 21a:	34 e0       	ldi	r19, 0x04	; 4
 21c:	b1 d2       	rcall	.+1378   	; 0x780 <make_udp_reply_from_request>
 21e:	70 cf       	rjmp	.-288    	; 0x100 <main+0x7c>

00000220 <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
 220:	2a 98       	cbi	0x05, 2	; 5
        // issue read command
        SPDR = op | (address & ADDR_MASK);
 222:	96 2f       	mov	r25, r22
 224:	9f 71       	andi	r25, 0x1F	; 31
 226:	98 2b       	or	r25, r24
 228:	9e bd       	out	0x2e, r25	; 46
        waitspi();
 22a:	0d b4       	in	r0, 0x2d	; 45
 22c:	07 fe       	sbrs	r0, 7
 22e:	fd cf       	rjmp	.-6      	; 0x22a <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
 230:	1e bc       	out	0x2e, r1	; 46
        waitspi();
 232:	0d b4       	in	r0, 0x2d	; 45
 234:	07 fe       	sbrs	r0, 7
 236:	fd cf       	rjmp	.-6      	; 0x232 <enc28j60ReadOp+0x12>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
 238:	67 ff       	sbrs	r22, 7
 23a:	04 c0       	rjmp	.+8      	; 0x244 <enc28j60ReadOp+0x24>
        {
                SPDR = 0x00;
 23c:	1e bc       	out	0x2e, r1	; 46
                waitspi();
 23e:	0d b4       	in	r0, 0x2d	; 45
 240:	07 fe       	sbrs	r0, 7
 242:	fd cf       	rjmp	.-6      	; 0x23e <enc28j60ReadOp+0x1e>
        }
        // release CS
        CSPASSIVE;
 244:	2a 9a       	sbi	0x05, 2	; 5
        return(SPDR);
 246:	8e b5       	in	r24, 0x2e	; 46
}
 248:	08 95       	ret

0000024a <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
 24a:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = op | (address & ADDR_MASK);
 24c:	6f 71       	andi	r22, 0x1F	; 31
 24e:	68 2b       	or	r22, r24
 250:	6e bd       	out	0x2e, r22	; 46
        waitspi();
 252:	0d b4       	in	r0, 0x2d	; 45
 254:	07 fe       	sbrs	r0, 7
 256:	fd cf       	rjmp	.-6      	; 0x252 <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
 258:	4e bd       	out	0x2e, r20	; 46
        waitspi();
 25a:	0d b4       	in	r0, 0x2d	; 45
 25c:	07 fe       	sbrs	r0, 7
 25e:	fd cf       	rjmp	.-6      	; 0x25a <enc28j60WriteOp+0x10>
        CSPASSIVE;
 260:	2a 9a       	sbi	0x05, 2	; 5
}
 262:	08 95       	ret

00000264 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
 264:	ac 01       	movw	r20, r24
 266:	fb 01       	movw	r30, r22
        CSACTIVE;
 268:	2a 98       	cbi	0x05, 2	; 5
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
 26a:	8a e3       	ldi	r24, 0x3A	; 58
 26c:	8e bd       	out	0x2e, r24	; 46
        waitspi();
 26e:	0d b4       	in	r0, 0x2d	; 45
 270:	07 fe       	sbrs	r0, 7
 272:	fd cf       	rjmp	.-6      	; 0x26e <enc28j60ReadBuffer+0xa>
 274:	9a 01       	movw	r18, r20
 276:	df 01       	movw	r26, r30
 278:	08 c0       	rjmp	.+16     	; 0x28a <enc28j60ReadBuffer+0x26>
        while(len)
        {
                len--;
                // read data
                SPDR = 0x00;
 27a:	1e bc       	out	0x2e, r1	; 46
                waitspi();
 27c:	0d b4       	in	r0, 0x2d	; 45
 27e:	07 fe       	sbrs	r0, 7
 280:	fd cf       	rjmp	.-6      	; 0x27c <enc28j60ReadBuffer+0x18>
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
 282:	21 50       	subi	r18, 0x01	; 1
 284:	30 40       	sbci	r19, 0x00	; 0
                // read data
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
 286:	8e b5       	in	r24, 0x2e	; 46
 288:	8d 93       	st	X+, r24
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
 28a:	21 15       	cp	r18, r1
 28c:	31 05       	cpc	r19, r1
 28e:	a9 f7       	brne	.-22     	; 0x27a <enc28j60ReadBuffer+0x16>
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
 290:	e4 0f       	add	r30, r20
 292:	f5 1f       	adc	r31, r21
 294:	10 82       	st	Z, r1
        CSPASSIVE;
 296:	2a 9a       	sbi	0x05, 2	; 5
}
 298:	08 95       	ret

0000029a <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
 29a:	9c 01       	movw	r18, r24
 29c:	fb 01       	movw	r30, r22
        CSACTIVE;
 29e:	2a 98       	cbi	0x05, 2	; 5
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
 2a0:	8a e7       	ldi	r24, 0x7A	; 122
 2a2:	8e bd       	out	0x2e, r24	; 46
        waitspi();
 2a4:	0d b4       	in	r0, 0x2d	; 45
 2a6:	07 fe       	sbrs	r0, 7
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <enc28j60WriteBuffer+0xa>
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <enc28j60WriteBuffer+0x22>
        while(len)
        {
                len--;
                // write data
                SPDR = *data;
 2ac:	80 81       	ld	r24, Z
 2ae:	8e bd       	out	0x2e, r24	; 46
                data++;
                waitspi();
 2b0:	0d b4       	in	r0, 0x2d	; 45
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <enc28j60WriteBuffer+0x16>
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
        {
                len--;
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	30 40       	sbci	r19, 0x00	; 0
                // write data
                SPDR = *data;
                data++;
 2ba:	31 96       	adiw	r30, 0x01	; 1
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
 2bc:	21 15       	cp	r18, r1
 2be:	31 05       	cpc	r19, r1
 2c0:	a9 f7       	brne	.-22     	; 0x2ac <enc28j60WriteBuffer+0x12>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
 2c2:	2a 9a       	sbi	0x05, 2	; 5
}
 2c4:	08 95       	ret

000002c6 <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	18 2f       	mov	r17, r24
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
 2ce:	c8 2f       	mov	r28, r24
 2d0:	d0 e0       	ldi	r29, 0x00	; 0
 2d2:	c0 76       	andi	r28, 0x60	; 96
 2d4:	d0 70       	andi	r29, 0x00	; 0
 2d6:	80 91 39 02 	lds	r24, 0x0239
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	c8 17       	cp	r28, r24
 2de:	d9 07       	cpc	r29, r25
 2e0:	81 f0       	breq	.+32     	; 0x302 <enc28j60SetBank+0x3c>
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
 2e2:	80 ea       	ldi	r24, 0xA0	; 160
 2e4:	6f e1       	ldi	r22, 0x1F	; 31
 2e6:	43 e0       	ldi	r20, 0x03	; 3
 2e8:	b0 df       	rcall	.-160    	; 0x24a <enc28j60WriteOp>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
 2ea:	85 e0       	ldi	r24, 0x05	; 5
 2ec:	d5 95       	asr	r29
 2ee:	c7 95       	ror	r28
 2f0:	8a 95       	dec	r24
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <enc28j60SetBank+0x26>
 2f4:	80 e8       	ldi	r24, 0x80	; 128
 2f6:	6f e1       	ldi	r22, 0x1F	; 31
 2f8:	4c 2f       	mov	r20, r28
 2fa:	a7 df       	rcall	.-178    	; 0x24a <enc28j60WriteOp>
                Enc28j60Bank = (address & BANK_MASK);
 2fc:	10 76       	andi	r17, 0x60	; 96
 2fe:	10 93 39 02 	sts	0x0239, r17
        }
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	08 95       	ret

0000030a <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
 30a:	1f 93       	push	r17
 30c:	18 2f       	mov	r17, r24
        // set the bank
        enc28j60SetBank(address);
 30e:	db df       	rcall	.-74     	; 0x2c6 <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	61 2f       	mov	r22, r17
 314:	85 df       	rcall	.-246    	; 0x220 <enc28j60ReadOp>
}
 316:	1f 91       	pop	r17
 318:	08 95       	ret

0000031a <enc28j60Write>:

void enc28j60Write(uint8_t address, uint8_t data)
{
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	18 2f       	mov	r17, r24
 320:	06 2f       	mov	r16, r22
        // set the bank
        enc28j60SetBank(address);
 322:	d1 df       	rcall	.-94     	; 0x2c6 <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
 324:	80 e4       	ldi	r24, 0x40	; 64
 326:	61 2f       	mov	r22, r17
 328:	40 2f       	mov	r20, r16
 32a:	8f df       	rcall	.-226    	; 0x24a <enc28j60WriteOp>
}
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <enc28j60PhyWrite>:

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	98 2f       	mov	r25, r24
 338:	16 2f       	mov	r17, r22
 33a:	07 2f       	mov	r16, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
 33c:	84 ed       	ldi	r24, 0xD4	; 212
 33e:	69 2f       	mov	r22, r25
 340:	ec df       	rcall	.-40     	; 0x31a <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
 342:	86 ed       	ldi	r24, 0xD6	; 214
 344:	61 2f       	mov	r22, r17
 346:	e9 df       	rcall	.-46     	; 0x31a <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
 348:	87 ed       	ldi	r24, 0xD7	; 215
 34a:	60 2f       	mov	r22, r16
 34c:	e6 df       	rcall	.-52     	; 0x31a <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 34e:	18 e2       	ldi	r17, 0x28	; 40
 350:	03 c0       	rjmp	.+6      	; 0x358 <enc28j60PhyWrite+0x26>
 352:	81 2f       	mov	r24, r17
 354:	8a 95       	dec	r24
 356:	f1 f7       	brne	.-4      	; 0x354 <enc28j60PhyWrite+0x22>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
 358:	8a ee       	ldi	r24, 0xEA	; 234
 35a:	d7 df       	rcall	.-82     	; 0x30a <enc28j60Read>
 35c:	80 fd       	sbrc	r24, 0
 35e:	f9 cf       	rjmp	.-14     	; 0x352 <enc28j60PhyWrite+0x20>
                _delay_us(15);
        }
}
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <enc28j60getrev>:
}

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
	return(enc28j60Read(EREVID));
 366:	82 e7       	ldi	r24, 0x72	; 114
 368:	d0 df       	rcall	.-96     	; 0x30a <enc28j60Read>
}
 36a:	08 95       	ret

0000036c <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	8c 01       	movw	r16, r24
 376:	7b 01       	movw	r14, r22
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	6f ef       	ldi	r22, 0xFF	; 255
 37c:	ce df       	rcall	.-100    	; 0x31a <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	69 e1       	ldi	r22, 0x19	; 25
 382:	cb df       	rcall	.-106    	; 0x31a <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
 384:	60 2f       	mov	r22, r16
 386:	61 50       	subi	r22, 0x01	; 1
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	c7 df       	rcall	.-114    	; 0x31a <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
 38c:	98 01       	movw	r18, r16
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	36 4e       	sbci	r19, 0xE6	; 230
 392:	87 e0       	ldi	r24, 0x07	; 7
 394:	63 2f       	mov	r22, r19
 396:	c1 df       	rcall	.-126    	; 0x31a <enc28j60Write>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
 398:	8a e7       	ldi	r24, 0x7A	; 122
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	55 df       	rcall	.-342    	; 0x24a <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
 3a0:	c8 01       	movw	r24, r16
 3a2:	b7 01       	movw	r22, r14
 3a4:	7a df       	rcall	.-268    	; 0x29a <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
 3a6:	80 e8       	ldi	r24, 0x80	; 128
 3a8:	6f e1       	ldi	r22, 0x1F	; 31
 3aa:	48 e0       	ldi	r20, 0x08	; 8
 3ac:	4e df       	rcall	.-356    	; 0x24a <enc28j60WriteOp>
        // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
	if( (enc28j60Read(EIR) & EIR_TXERIF) ){
 3ae:	8c e1       	ldi	r24, 0x1C	; 28
 3b0:	ac df       	rcall	.-168    	; 0x30a <enc28j60Read>
 3b2:	81 ff       	sbrs	r24, 1
 3b4:	04 c0       	rjmp	.+8      	; 0x3be <enc28j60PacketSend+0x52>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRTS);
 3b6:	80 ea       	ldi	r24, 0xA0	; 160
 3b8:	6f e1       	ldi	r22, 0x1F	; 31
 3ba:	48 e0       	ldi	r20, 0x08	; 8
 3bc:	46 df       	rcall	.-372    	; 0x24a <enc28j60WriteOp>
        }
}
 3be:	1f 91       	pop	r17
 3c0:	0f 91       	pop	r16
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	08 95       	ret

000003c8 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
 3c8:	af 92       	push	r10
 3ca:	bf 92       	push	r11
 3cc:	cf 92       	push	r12
 3ce:	df 92       	push	r13
 3d0:	ef 92       	push	r14
 3d2:	ff 92       	push	r15
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	6c 01       	movw	r12, r24
 3de:	5b 01       	movw	r10, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
 3e0:	89 e3       	ldi	r24, 0x39	; 57
 3e2:	93 df       	rcall	.-218    	; 0x30a <enc28j60Read>
 3e4:	88 23       	and	r24, r24
 3e6:	19 f4       	brne	.+6      	; 0x3ee <enc28j60PacketReceive+0x26>
 3e8:	00 e0       	ldi	r16, 0x00	; 0
 3ea:	10 e0       	ldi	r17, 0x00	; 0
 3ec:	4e c0       	rjmp	.+156    	; 0x48a <enc28j60PacketReceive+0xc2>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (NextPacketPtr));
 3ee:	60 91 3a 02 	lds	r22, 0x023A
 3f2:	10 91 3b 02 	lds	r17, 0x023B
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 df       	rcall	.-224    	; 0x31a <enc28j60Write>
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	61 2f       	mov	r22, r17
 3fe:	8d df       	rcall	.-230    	; 0x31a <enc28j60Write>
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 400:	8a e3       	ldi	r24, 0x3A	; 58
 402:	60 e0       	ldi	r22, 0x00	; 0
 404:	0d df       	rcall	.-486    	; 0x220 <enc28j60ReadOp>
 406:	18 2f       	mov	r17, r24
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 408:	8a e3       	ldi	r24, 0x3A	; 58
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	09 df       	rcall	.-494    	; 0x220 <enc28j60ReadOp>
 40e:	38 2f       	mov	r19, r24
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	c1 2f       	mov	r28, r17
 414:	d0 e0       	ldi	r29, 0x00	; 0
 416:	c2 2b       	or	r28, r18
 418:	d3 2b       	or	r29, r19
 41a:	d0 93 3b 02 	sts	0x023B, r29
 41e:	c0 93 3a 02 	sts	0x023A, r28
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 422:	8a e3       	ldi	r24, 0x3A	; 58
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	fc de       	rcall	.-520    	; 0x220 <enc28j60ReadOp>
 428:	e8 2e       	mov	r14, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 42a:	8a e3       	ldi	r24, 0x3A	; 58
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	f8 de       	rcall	.-528    	; 0x220 <enc28j60ReadOp>
 430:	f8 2e       	mov	r15, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 432:	8a e3       	ldi	r24, 0x3A	; 58
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	f4 de       	rcall	.-536    	; 0x220 <enc28j60ReadOp>
 438:	08 2f       	mov	r16, r24
 43a:	10 e0       	ldi	r17, 0x00	; 0
	rxstat |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 43c:	8a e3       	ldi	r24, 0x3A	; 58
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	ef de       	rcall	.-546    	; 0x220 <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
 442:	38 2f       	mov	r19, r24
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	20 2b       	or	r18, r16
 448:	31 2b       	or	r19, r17
 44a:	27 fd       	sbrc	r18, 7
 44c:	03 c0       	rjmp	.+6      	; 0x454 <enc28j60PacketReceive+0x8c>
 44e:	00 e0       	ldi	r16, 0x00	; 0
 450:	10 e0       	ldi	r17, 0x00	; 0
 452:	11 c0       	rjmp	.+34     	; 0x476 <enc28j60PacketReceive+0xae>
	enc28j60Write(ERDPTH, (NextPacketPtr)>>8);
	// read the next packet pointer
	NextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	NextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
 454:	0e 2d       	mov	r16, r14
 456:	10 e0       	ldi	r17, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
 458:	9f 2d       	mov	r25, r15
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	08 2b       	or	r16, r24
 45e:	19 2b       	or	r17, r25
        len-=4; //remove the CRC count
 460:	c6 01       	movw	r24, r12
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	04 50       	subi	r16, 0x04	; 4
 466:	10 40       	sbci	r17, 0x00	; 0
 468:	80 17       	cp	r24, r16
 46a:	91 07       	cpc	r25, r17
 46c:	08 f4       	brcc	.+2      	; 0x470 <enc28j60PacketReceive+0xa8>
 46e:	8c 01       	movw	r16, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
 470:	c8 01       	movw	r24, r16
 472:	b5 01       	movw	r22, r10
 474:	f7 de       	rcall	.-530    	; 0x264 <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (NextPacketPtr));
 476:	8c e0       	ldi	r24, 0x0C	; 12
 478:	6c 2f       	mov	r22, r28
 47a:	4f df       	rcall	.-354    	; 0x31a <enc28j60Write>
	enc28j60Write(ERXRDPTH, (NextPacketPtr)>>8);
 47c:	8d e0       	ldi	r24, 0x0D	; 13
 47e:	6d 2f       	mov	r22, r29
 480:	4c df       	rcall	.-360    	; 0x31a <enc28j60Write>
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	6e e1       	ldi	r22, 0x1E	; 30
 486:	40 e4       	ldi	r20, 0x40	; 64
 488:	e0 de       	rcall	.-576    	; 0x24a <enc28j60WriteOp>
	return(len);
}
 48a:	c8 01       	movw	r24, r16
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	df 90       	pop	r13
 49a:	cf 90       	pop	r12
 49c:	bf 90       	pop	r11
 49e:	af 90       	pop	r10
 4a0:	08 95       	ret

000004a2 <enc28j60Init>:
        }
}


void enc28j60Init(uint8_t* macaddr)
{
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	8c 01       	movw	r16, r24
	// initialize I/O
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
 4a8:	22 9a       	sbi	0x04, 2	; 4
	CSPASSIVE;
 4aa:	2a 9a       	sbi	0x05, 2	; 5
        //	
	DDRB  |= 1<<PB2 |1<<PB3 | 1<<PB5; // mosi, sck, ss output
 4ac:	84 b1       	in	r24, 0x04	; 4
 4ae:	8c 62       	ori	r24, 0x2C	; 44
 4b0:	84 b9       	out	0x04, r24	; 4
	cbi(DDRB,PINB4); // MISO is input
 4b2:	24 98       	cbi	0x04, 4	; 4
        //
	CSPASSIVE;
 4b4:	2a 9a       	sbi	0x05, 2	; 5
        cbi(PORTB,PB3); // MOSI low
 4b6:	2b 98       	cbi	0x05, 3	; 5
        cbi(PORTB,PB5); // SCK low
 4b8:	2d 98       	cbi	0x05, 5	; 5
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR);
 4ba:	80 e5       	ldi	r24, 0x50	; 80
 4bc:	8c bd       	out	0x2c, r24	; 44
        SPSR |= (1<<SPI2X);
 4be:	8d b5       	in	r24, 0x2d	; 45
 4c0:	81 60       	ori	r24, 0x01	; 1
 4c2:	8d bd       	out	0x2d, r24	; 45
	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	4f ef       	ldi	r20, 0xFF	; 255
 4ca:	bf de       	rcall	.-642    	; 0x24a <enc28j60WriteOp>
	delay_ms(50);
 4cc:	82 e3       	ldi	r24, 0x32	; 50
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	dd d1       	rcall	.+954    	; 0x88c <delay_ms>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	NextPacketPtr = RXSTART_INIT;
 4d2:	10 92 3b 02 	sts	0x023B, r1
 4d6:	10 92 3a 02 	sts	0x023A, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
 4da:	88 e0       	ldi	r24, 0x08	; 8
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	1d df       	rcall	.-454    	; 0x31a <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
 4e0:	89 e0       	ldi	r24, 0x09	; 9
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	1a df       	rcall	.-460    	; 0x31a <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
 4e6:	8c e0       	ldi	r24, 0x0C	; 12
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	17 df       	rcall	.-466    	; 0x31a <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
 4ec:	8d e0       	ldi	r24, 0x0D	; 13
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	14 df       	rcall	.-472    	; 0x31a <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
 4f2:	8a e0       	ldi	r24, 0x0A	; 10
 4f4:	6e ef       	ldi	r22, 0xFE	; 254
 4f6:	11 df       	rcall	.-478    	; 0x31a <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
 4f8:	8b e0       	ldi	r24, 0x0B	; 11
 4fa:	69 e1       	ldi	r22, 0x19	; 25
 4fc:	0e df       	rcall	.-484    	; 0x31a <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
 4fe:	84 e0       	ldi	r24, 0x04	; 4
 500:	6f ef       	ldi	r22, 0xFF	; 255
 502:	0b df       	rcall	.-490    	; 0x31a <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
 504:	85 e0       	ldi	r24, 0x05	; 5
 506:	69 e1       	ldi	r22, 0x19	; 25
 508:	08 df       	rcall	.-496    	; 0x31a <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
 50a:	86 e0       	ldi	r24, 0x06	; 6
 50c:	6f ef       	ldi	r22, 0xFF	; 255
 50e:	05 df       	rcall	.-502    	; 0x31a <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
 510:	87 e0       	ldi	r24, 0x07	; 7
 512:	6f e1       	ldi	r22, 0x1F	; 31
 514:	02 df       	rcall	.-508    	; 0x31a <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
 516:	88 e3       	ldi	r24, 0x38	; 56
 518:	60 eb       	ldi	r22, 0xB0	; 176
 51a:	ff de       	rcall	.-514    	; 0x31a <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
 51c:	88 e2       	ldi	r24, 0x28	; 40
 51e:	6f e3       	ldi	r22, 0x3F	; 63
 520:	fc de       	rcall	.-520    	; 0x31a <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
 522:	89 e2       	ldi	r24, 0x29	; 41
 524:	60 e3       	ldi	r22, 0x30	; 48
 526:	f9 de       	rcall	.-526    	; 0x31a <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
 528:	80 e3       	ldi	r24, 0x30	; 48
 52a:	69 ef       	ldi	r22, 0xF9	; 249
 52c:	f6 de       	rcall	.-532    	; 0x31a <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
 52e:	81 e3       	ldi	r24, 0x31	; 49
 530:	67 ef       	ldi	r22, 0xF7	; 247
 532:	f3 de       	rcall	.-538    	; 0x31a <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
 534:	80 ec       	ldi	r24, 0xC0	; 192
 536:	6d e0       	ldi	r22, 0x0D	; 13
 538:	f0 de       	rcall	.-544    	; 0x31a <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
 53a:	81 ec       	ldi	r24, 0xC1	; 193
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	ed de       	rcall	.-550    	; 0x31a <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
 540:	80 e8       	ldi	r24, 0x80	; 128
 542:	62 ec       	ldi	r22, 0xC2	; 194
 544:	42 e3       	ldi	r20, 0x32	; 50
 546:	81 de       	rcall	.-766    	; 0x24a <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
 548:	86 ec       	ldi	r24, 0xC6	; 198
 54a:	62 e1       	ldi	r22, 0x12	; 18
 54c:	e6 de       	rcall	.-564    	; 0x31a <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
 54e:	87 ec       	ldi	r24, 0xC7	; 199
 550:	6c e0       	ldi	r22, 0x0C	; 12
 552:	e3 de       	rcall	.-570    	; 0x31a <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
 554:	84 ec       	ldi	r24, 0xC4	; 196
 556:	62 e1       	ldi	r22, 0x12	; 18
 558:	e0 de       	rcall	.-576    	; 0x31a <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
 55a:	8a ec       	ldi	r24, 0xCA	; 202
 55c:	64 ef       	ldi	r22, 0xF4	; 244
 55e:	dd de       	rcall	.-582    	; 0x31a <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
 560:	8b ec       	ldi	r24, 0xCB	; 203
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	da de       	rcall	.-588    	; 0x31a <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
 566:	84 ee       	ldi	r24, 0xE4	; 228
 568:	f8 01       	movw	r30, r16
 56a:	60 81       	ld	r22, Z
 56c:	d6 de       	rcall	.-596    	; 0x31a <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
 56e:	85 ee       	ldi	r24, 0xE5	; 229
 570:	f8 01       	movw	r30, r16
 572:	61 81       	ldd	r22, Z+1	; 0x01
 574:	d2 de       	rcall	.-604    	; 0x31a <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
 576:	82 ee       	ldi	r24, 0xE2	; 226
 578:	f8 01       	movw	r30, r16
 57a:	62 81       	ldd	r22, Z+2	; 0x02
 57c:	ce de       	rcall	.-612    	; 0x31a <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
 57e:	83 ee       	ldi	r24, 0xE3	; 227
 580:	f8 01       	movw	r30, r16
 582:	63 81       	ldd	r22, Z+3	; 0x03
 584:	ca de       	rcall	.-620    	; 0x31a <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
 586:	80 ee       	ldi	r24, 0xE0	; 224
 588:	f8 01       	movw	r30, r16
 58a:	64 81       	ldd	r22, Z+4	; 0x04
 58c:	c6 de       	rcall	.-628    	; 0x31a <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
 58e:	81 ee       	ldi	r24, 0xE1	; 225
 590:	f8 01       	movw	r30, r16
 592:	65 81       	ldd	r22, Z+5	; 0x05
 594:	c2 de       	rcall	.-636    	; 0x31a <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
 596:	80 e1       	ldi	r24, 0x10	; 16
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	71 e0       	ldi	r23, 0x01	; 1
 59c:	ca de       	rcall	.-620    	; 0x332 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
 59e:	8f e1       	ldi	r24, 0x1F	; 31
 5a0:	92 de       	rcall	.-732    	; 0x2c6 <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
 5a2:	80 e8       	ldi	r24, 0x80	; 128
 5a4:	6b e1       	ldi	r22, 0x1B	; 27
 5a6:	40 ec       	ldi	r20, 0xC0	; 192
 5a8:	50 de       	rcall	.-864    	; 0x24a <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
 5aa:	80 e8       	ldi	r24, 0x80	; 128
 5ac:	6f e1       	ldi	r22, 0x1F	; 31
 5ae:	44 e0       	ldi	r20, 0x04	; 4
 5b0:	4c de       	rcall	.-872    	; 0x24a <enc28j60WriteOp>
}
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	08 95       	ret

000005b8 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	7c 01       	movw	r14, r24
        // type 0=ip 
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;

        if(type==1){
 5c6:	41 30       	cpi	r20, 0x01	; 1
 5c8:	61 f4       	brne	.+24     	; 0x5e2 <checksum+0x2a>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length - IP addr length
                sum+=len-8; // = real udp len
 5ca:	68 50       	subi	r22, 0x08	; 8
 5cc:	70 40       	sbci	r23, 0x00	; 0
 5ce:	9b 01       	movw	r18, r22
 5d0:	40 e0       	ldi	r20, 0x00	; 0
 5d2:	50 e0       	ldi	r21, 0x00	; 0
 5d4:	68 5f       	subi	r22, 0xF8	; 248
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	2f 5e       	subi	r18, 0xEF	; 239
 5da:	3f 4f       	sbci	r19, 0xFF	; 255
 5dc:	4f 4f       	sbci	r20, 0xFF	; 255
 5de:	5f 4f       	sbci	r21, 0xFF	; 255
 5e0:	12 c0       	rjmp	.+36     	; 0x606 <checksum+0x4e>
        }
        if(type==2){
 5e2:	42 30       	cpi	r20, 0x02	; 2
 5e4:	29 f0       	breq	.+10     	; 0x5f0 <checksum+0x38>
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	40 e0       	ldi	r20, 0x00	; 0
 5ec:	50 e0       	ldi	r21, 0x00	; 0
 5ee:	0b c0       	rjmp	.+22     	; 0x606 <checksum+0x4e>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length - IP addr length
                sum+=len-8; // = real tcp len
 5f0:	68 50       	subi	r22, 0x08	; 8
 5f2:	70 40       	sbci	r23, 0x00	; 0
 5f4:	9b 01       	movw	r18, r22
 5f6:	40 e0       	ldi	r20, 0x00	; 0
 5f8:	50 e0       	ldi	r21, 0x00	; 0
 5fa:	68 5f       	subi	r22, 0xF8	; 248
 5fc:	7f 4f       	sbci	r23, 0xFF	; 255
 5fe:	2a 5f       	subi	r18, 0xFA	; 250
 600:	3f 4f       	sbci	r19, 0xFF	; 255
 602:	4f 4f       	sbci	r20, 0xFF	; 255
 604:	5f 4f       	sbci	r21, 0xFF	; 255
 606:	e7 01       	movw	r28, r14
 608:	8b 01       	movw	r16, r22
 60a:	0f c0       	rjmp	.+30     	; 0x62a <checksum+0x72>
        }
        // build the sum of 16bit words
        while(len >1){
                sum += 0xFFFF & (*buf<<8|*(buf+1));
 60c:	f8 81       	ld	r31, Y
 60e:	e0 e0       	ldi	r30, 0x00	; 0
 610:	89 81       	ldd	r24, Y+1	; 0x01
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	8e 2b       	or	r24, r30
 616:	9f 2b       	or	r25, r31
 618:	a0 e0       	ldi	r26, 0x00	; 0
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	28 0f       	add	r18, r24
 61e:	39 1f       	adc	r19, r25
 620:	4a 1f       	adc	r20, r26
 622:	5b 1f       	adc	r21, r27
                buf+=2;
 624:	22 96       	adiw	r28, 0x02	; 2
                len-=2;
 626:	02 50       	subi	r16, 0x02	; 2
 628:	10 40       	sbci	r17, 0x00	; 0
                // the length here is the length of tcp (data+header len)
                // =length - IP addr length
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
 62a:	02 30       	cpi	r16, 0x02	; 2
 62c:	11 05       	cpc	r17, r1
 62e:	70 f7       	brcc	.-36     	; 0x60c <checksum+0x54>
 630:	fb 01       	movw	r30, r22
 632:	ee 7f       	andi	r30, 0xFE	; 254
 634:	ee 0d       	add	r30, r14
 636:	ff 1d       	adc	r31, r15
                sum += 0xFFFF & (*buf<<8|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
 638:	60 ff       	sbrs	r22, 0
 63a:	0d c0       	rjmp	.+26     	; 0x656 <checksum+0x9e>
                sum += (0xFF & *buf)<<8;
 63c:	90 81       	ld	r25, Z
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	aa 27       	eor	r26, r26
 642:	97 fd       	sbrc	r25, 7
 644:	a0 95       	com	r26
 646:	ba 2f       	mov	r27, r26
 648:	02 c0       	rjmp	.+4      	; 0x64e <checksum+0x96>
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
                sum = (sum & 0xFFFF)+(sum >> 16);
 64a:	40 70       	andi	r20, 0x00	; 0
 64c:	50 70       	andi	r21, 0x00	; 0
 64e:	28 0f       	add	r18, r24
 650:	39 1f       	adc	r19, r25
 652:	4a 1f       	adc	r20, r26
 654:	5b 1f       	adc	r21, r27
        if (len){
                sum += (0xFF & *buf)<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
 656:	ca 01       	movw	r24, r20
 658:	aa 27       	eor	r26, r26
 65a:	bb 27       	eor	r27, r27
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	a1 05       	cpc	r26, r1
 660:	b1 05       	cpc	r27, r1
 662:	99 f7       	brne	.-26     	; 0x64a <checksum+0x92>
 664:	20 95       	com	r18
 666:	30 95       	com	r19
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
}
 668:	c9 01       	movw	r24, r18
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	ef 90       	pop	r14
 676:	08 95       	ret

00000678 <init_ip_arp_udp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp(uint8_t *mymac,uint8_t *myip){
 678:	ac 01       	movw	r20, r24
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
        uint8_t i=0;
        while(i<4){
                ipaddr[i]=myip[i];
 67e:	f9 01       	movw	r30, r18
 680:	ee 5b       	subi	r30, 0xBE	; 190
 682:	fd 4f       	sbci	r31, 0xFD	; 253
 684:	db 01       	movw	r26, r22
 686:	a2 0f       	add	r26, r18
 688:	b3 1f       	adc	r27, r19
 68a:	8c 91       	ld	r24, X
 68c:	80 83       	st	Z, r24
 68e:	2f 5f       	subi	r18, 0xFF	; 255
 690:	3f 4f       	sbci	r19, 0xFF	; 255
}

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp(uint8_t *mymac,uint8_t *myip){
        uint8_t i=0;
        while(i<4){
 692:	24 30       	cpi	r18, 0x04	; 4
 694:	31 05       	cpc	r19, r1
 696:	99 f7       	brne	.-26     	; 0x67e <init_ip_arp_udp+0x6>
 698:	20 e0       	ldi	r18, 0x00	; 0
 69a:	30 e0       	ldi	r19, 0x00	; 0
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
                macaddr[i]=mymac[i];
 69c:	f9 01       	movw	r30, r18
 69e:	e4 5c       	subi	r30, 0xC4	; 196
 6a0:	fd 4f       	sbci	r31, 0xFD	; 253
 6a2:	da 01       	movw	r26, r20
 6a4:	a2 0f       	add	r26, r18
 6a6:	b3 1f       	adc	r27, r19
 6a8:	8c 91       	ld	r24, X
 6aa:	80 83       	st	Z, r24
 6ac:	2f 5f       	subi	r18, 0xFF	; 255
 6ae:	3f 4f       	sbci	r19, 0xFF	; 255
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
 6b0:	26 30       	cpi	r18, 0x06	; 6
 6b2:	31 05       	cpc	r19, r1
 6b4:	99 f7       	brne	.-26     	; 0x69c <init_ip_arp_udp+0x24>
                macaddr[i]=mymac[i];
                i++;
        }
}
 6b6:	08 95       	ret

000006b8 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint8_t len){
 6b8:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //
        if (len<41){
 6ba:	69 32       	cpi	r22, 0x29	; 41
 6bc:	b0 f0       	brcs	.+44     	; 0x6ea <eth_type_is_arp_and_my_ip+0x32>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 6be:	84 85       	ldd	r24, Z+12	; 0x0c
 6c0:	88 30       	cpi	r24, 0x08	; 8
 6c2:	99 f4       	brne	.+38     	; 0x6ea <eth_type_is_arp_and_my_ip+0x32>
 6c4:	85 85       	ldd	r24, Z+13	; 0x0d
 6c6:	86 30       	cpi	r24, 0x06	; 6
 6c8:	81 f4       	brne	.+32     	; 0x6ea <eth_type_is_arp_and_my_ip+0x32>
 6ca:	df 01       	movw	r26, r30
 6cc:	96 96       	adiw	r26, 0x26	; 38
 6ce:	e2 e4       	ldi	r30, 0x42	; 66
 6d0:	f2 e0       	ldi	r31, 0x02	; 2
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
 6d2:	9c 91       	ld	r25, X
 6d4:	80 81       	ld	r24, Z
 6d6:	98 17       	cp	r25, r24
 6d8:	41 f4       	brne	.+16     	; 0x6ea <eth_type_is_arp_and_my_ip+0x32>
 6da:	11 96       	adiw	r26, 0x01	; 1
 6dc:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	e6 34       	cpi	r30, 0x46	; 70
 6e2:	f8 07       	cpc	r31, r24
 6e4:	b1 f7       	brne	.-20     	; 0x6d2 <eth_type_is_arp_and_my_ip+0x1a>
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	08 95       	ret
 6ea:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
 6ec:	08 95       	ret

000006ee <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint8_t len){
 6ee:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
 6f0:	6a 32       	cpi	r22, 0x2A	; 42
 6f2:	b8 f0       	brcs	.+46     	; 0x722 <eth_type_is_ip_and_my_ip+0x34>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 6f4:	84 85       	ldd	r24, Z+12	; 0x0c
 6f6:	88 30       	cpi	r24, 0x08	; 8
 6f8:	a1 f4       	brne	.+40     	; 0x722 <eth_type_is_ip_and_my_ip+0x34>
 6fa:	85 85       	ldd	r24, Z+13	; 0x0d
 6fc:	88 23       	and	r24, r24
 6fe:	89 f4       	brne	.+34     	; 0x722 <eth_type_is_ip_and_my_ip+0x34>
 700:	df 01       	movw	r26, r30
 702:	e2 e4       	ldi	r30, 0x42	; 66
 704:	f2 e0       	ldi	r31, 0x02	; 2
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
 706:	5e 96       	adiw	r26, 0x1e	; 30
 708:	9c 91       	ld	r25, X
 70a:	5e 97       	sbiw	r26, 0x1e	; 30
 70c:	80 81       	ld	r24, Z
 70e:	98 17       	cp	r25, r24
 710:	41 f4       	brne	.+16     	; 0x722 <eth_type_is_ip_and_my_ip+0x34>
 712:	11 96       	adiw	r26, 0x01	; 1
 714:	31 96       	adiw	r30, 0x01	; 1
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        while(i<4){
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	e6 34       	cpi	r30, 0x46	; 70
 71a:	f8 07       	cpc	r31, r24
 71c:	a1 f7       	brne	.-24     	; 0x706 <eth_type_is_ip_and_my_ip+0x18>
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	08 95       	ret
 722:	80 e0       	ldi	r24, 0x00	; 0
                        return(0);
                }
                i++;
        }
        return(1);
}
 724:	08 95       	ret

00000726 <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
 726:	fc 01       	movw	r30, r24
 728:	ac e3       	ldi	r26, 0x3C	; 60
 72a:	b2 e0       	ldi	r27, 0x02	; 2
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
 72c:	86 81       	ldd	r24, Z+6	; 0x06
 72e:	80 83       	st	Z, r24
                buf[ETH_SRC_MAC +i]=macaddr[i];
 730:	8d 91       	ld	r24, X+
 732:	86 83       	std	Z+6, r24	; 0x06
 734:	31 96       	adiw	r30, 0x01	; 1
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	a2 34       	cpi	r26, 0x42	; 66
 73a:	b8 07       	cpc	r27, r24
 73c:	b9 f7       	brne	.-18     	; 0x72c <make_eth+0x6>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
 73e:	08 95       	ret

00000740 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	ec 01       	movw	r28, r24
 746:	fc 01       	movw	r30, r24
 748:	a2 e4       	ldi	r26, 0x42	; 66
 74a:	b2 e0       	ldi	r27, 0x02	; 2
        uint8_t i=0;
        uint16_t ck;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
 74c:	82 8d       	ldd	r24, Z+26	; 0x1a
 74e:	86 8f       	std	Z+30, r24	; 0x1e
                buf[IP_SRC_P+i]=ipaddr[i];
 750:	8d 91       	ld	r24, X+
 752:	82 8f       	std	Z+26, r24	; 0x1a
 754:	31 96       	adiw	r30, 0x01	; 1
// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        uint16_t ck;
        while(i<4){
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	a6 34       	cpi	r26, 0x46	; 70
 75a:	b8 07       	cpc	r27, r24
 75c:	b9 f7       	brne	.-18     	; 0x74c <make_ip+0xc>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
 75e:	18 8e       	std	Y+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
 760:	19 8e       	std	Y+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
 762:	80 e4       	ldi	r24, 0x40	; 64
 764:	8c 8b       	std	Y+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
 766:	1d 8a       	std	Y+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
 768:	8e 8b       	std	Y+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 76a:	ce 01       	movw	r24, r28
 76c:	0e 96       	adiw	r24, 0x0e	; 14
 76e:	64 e1       	ldi	r22, 0x14	; 20
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	21 df       	rcall	.-446    	; 0x5b8 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
 776:	98 8f       	std	Y+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
 778:	89 8f       	std	Y+25, r24	; 0x19
}
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <make_udp_reply_from_request>:
        enc28j60PacketSend(len,buf);
}

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
 780:	df 92       	push	r13
 782:	ef 92       	push	r14
 784:	ff 92       	push	r15
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	ec 01       	movw	r28, r24
 790:	7b 01       	movw	r14, r22
 792:	14 2f       	mov	r17, r20
 794:	d2 2e       	mov	r13, r18
 796:	03 2f       	mov	r16, r19
        uint8_t i=0;
        uint16_t ck;
        make_eth(buf);
 798:	c6 df       	rcall	.-116    	; 0x726 <make_eth>
 79a:	1d 3d       	cpi	r17, 0xDD	; 221
 79c:	08 f0       	brcs	.+2      	; 0x7a0 <make_udp_reply_from_request+0x20>
 79e:	1c ed       	ldi	r17, 0xDC	; 220
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
 7a0:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 7a2:	14 5e       	subi	r17, 0xE4	; 228
 7a4:	19 8b       	std	Y+17, r17	; 0x11
        make_ip(buf);
 7a6:	ce 01       	movw	r24, r28
 7a8:	cb df       	rcall	.-106    	; 0x740 <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
 7aa:	8a a1       	ldd	r24, Y+34	; 0x22
 7ac:	8c a3       	std	Y+36, r24	; 0x24
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
 7ae:	8b a1       	ldd	r24, Y+35	; 0x23
 7b0:	8d a3       	std	Y+37, r24	; 0x25
        buf[UDP_SRC_PORT_H_P]=port>>8;
 7b2:	0a a3       	std	Y+34, r16	; 0x22
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
 7b4:	db a2       	std	Y+35, r13	; 0x23
        // source port does not matter and is what the sender used.
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
 7b6:	1e a2       	std	Y+38, r1	; 0x26
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
 7b8:	14 51       	subi	r17, 0x14	; 20
 7ba:	1f a3       	std	Y+39, r17	; 0x27
 7bc:	18 50       	subi	r17, 0x08	; 8
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
 7be:	18 a6       	std	Y+40, r1	; 0x28
        buf[UDP_CHECKSUM_L_P]=0;
 7c0:	19 a6       	std	Y+41, r1	; 0x29
 7c2:	de 01       	movw	r26, r28
 7c4:	9a 96       	adiw	r26, 0x2a	; 42
 7c6:	20 e0       	ldi	r18, 0x00	; 0
 7c8:	30 e0       	ldi	r19, 0x00	; 0
 7ca:	07 c0       	rjmp	.+14     	; 0x7da <make_udp_reply_from_request+0x5a>
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
 7cc:	f7 01       	movw	r30, r14
 7ce:	e2 0f       	add	r30, r18
 7d0:	f3 1f       	adc	r31, r19
 7d2:	80 81       	ld	r24, Z
 7d4:	8d 93       	st	X+, r24
 7d6:	2f 5f       	subi	r18, 0xFF	; 255
 7d8:	3f 4f       	sbci	r19, 0xFF	; 255
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
 7da:	21 17       	cp	r18, r17
 7dc:	b8 f3       	brcs	.-18     	; 0x7cc <make_udp_reply_from_request+0x4c>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 7de:	01 2f       	mov	r16, r17
 7e0:	10 e0       	ldi	r17, 0x00	; 0
 7e2:	00 5f       	subi	r16, 0xF0	; 240
 7e4:	1f 4f       	sbci	r17, 0xFF	; 255
 7e6:	ce 01       	movw	r24, r28
 7e8:	4a 96       	adiw	r24, 0x1a	; 26
 7ea:	b8 01       	movw	r22, r16
 7ec:	41 e0       	ldi	r20, 0x01	; 1
 7ee:	e4 de       	rcall	.-568    	; 0x5b8 <checksum>
        buf[UDP_CHECKSUM_H_P]=ck>>8;
 7f0:	98 a7       	std	Y+40, r25	; 0x28
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
 7f2:	89 a7       	std	Y+41, r24	; 0x29
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 7f4:	c8 01       	movw	r24, r16
 7f6:	4a 96       	adiw	r24, 0x1a	; 26
 7f8:	be 01       	movw	r22, r28
 7fa:	b8 dd       	rcall	.-1168   	; 0x36c <enc28j60PacketSend>
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	ff 90       	pop	r15
 806:	ef 90       	pop	r14
 808:	df 90       	pop	r13
 80a:	08 95       	ret

0000080c <make_echo_reply_from_request>:
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
}

void make_echo_reply_from_request(uint8_t *buf,uint8_t len)
{
 80c:	1f 93       	push	r17
 80e:	cf 93       	push	r28
 810:	df 93       	push	r29
 812:	ec 01       	movw	r28, r24
 814:	16 2f       	mov	r17, r22
        make_eth(buf);
 816:	87 df       	rcall	.-242    	; 0x726 <make_eth>
        make_ip(buf);
 818:	ce 01       	movw	r24, r28
 81a:	92 df       	rcall	.-220    	; 0x740 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
 81c:	1a a2       	std	Y+34, r1	; 0x22
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 81e:	8c a1       	ldd	r24, Y+36	; 0x24
 820:	88 3f       	cpi	r24, 0xF8	; 248
 822:	18 f0       	brcs	.+6      	; 0x82a <make_echo_reply_from_request+0x1e>
                buf[ICMP_CHECKSUM_P+1]++;
 824:	8d a1       	ldd	r24, Y+37	; 0x25
 826:	8f 5f       	subi	r24, 0xFF	; 255
 828:	8d a3       	std	Y+37, r24	; 0x25
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
 82a:	8c a1       	ldd	r24, Y+36	; 0x24
 82c:	88 5f       	subi	r24, 0xF8	; 248
 82e:	8c a3       	std	Y+36, r24	; 0x24
        //
        enc28j60PacketSend(len,buf);
 830:	81 2f       	mov	r24, r17
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	be 01       	movw	r22, r28
 836:	9a dd       	rcall	.-1228   	; 0x36c <enc28j60PacketSend>
}
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	1f 91       	pop	r17
 83e:	08 95       	ret

00000840 <make_arp_answer_from_request>:
        buf[IP_CHECKSUM_P]=ck>>8;
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
}

void make_arp_answer_from_request(uint8_t *buf,uint8_t len)
{
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	ec 01       	movw	r28, r24
        uint8_t i=0;
        //
        make_eth(buf);
 846:	6f df       	rcall	.-290    	; 0x726 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 848:	1c 8a       	std	Y+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 84a:	82 e0       	ldi	r24, 0x02	; 2
 84c:	8d 8b       	std	Y+21, r24	; 0x15
 84e:	fe 01       	movw	r30, r28
 850:	ac e3       	ldi	r26, 0x3C	; 60
 852:	b2 e0       	ldi	r27, 0x02	; 2
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
 854:	86 89       	ldd	r24, Z+22	; 0x16
 856:	80 a3       	std	Z+32, r24	; 0x20
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
 858:	8d 91       	ld	r24, X+
 85a:	86 8b       	std	Z+22, r24	; 0x16
 85c:	31 96       	adiw	r30, 0x01	; 1
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
 85e:	82 e0       	ldi	r24, 0x02	; 2
 860:	a2 34       	cpi	r26, 0x42	; 66
 862:	b8 07       	cpc	r27, r24
 864:	b9 f7       	brne	.-18     	; 0x854 <make_arp_answer_from_request+0x14>
 866:	fe 01       	movw	r30, r28
 868:	7c 96       	adiw	r30, 0x1c	; 28
 86a:	a2 e4       	ldi	r26, 0x42	; 66
 86c:	b2 e0       	ldi	r27, 0x02	; 2
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
 86e:	80 81       	ld	r24, Z
 870:	82 87       	std	Z+10, r24	; 0x0a
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 872:	8d 91       	ld	r24, X+
 874:	81 93       	st	Z+, r24
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
 876:	82 e0       	ldi	r24, 0x02	; 2
 878:	a6 34       	cpi	r26, 0x46	; 70
 87a:	b8 07       	cpc	r27, r24
 87c:	c1 f7       	brne	.-16     	; 0x86e <make_arp_answer_from_request+0x2e>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
 87e:	8a e2       	ldi	r24, 0x2A	; 42
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	be 01       	movw	r22, r28
 884:	73 dd       	rcall	.-1306   	; 0x36c <enc28j60PacketSend>
}
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	08 95       	ret

0000088c <delay_ms>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 88c:	20 e8       	ldi	r18, 0x80	; 128
 88e:	37 e0       	ldi	r19, 0x07	; 7
 890:	04 c0       	rjmp	.+8      	; 0x89a <delay_ms+0xe>
 892:	f9 01       	movw	r30, r18
 894:	31 97       	sbiw	r30, 0x01	; 1
 896:	f1 f7       	brne	.-4      	; 0x894 <delay_ms+0x8>
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
                _delay_ms(0.96);
                ms--;
 898:	01 97       	sbiw	r24, 0x01	; 1
/* delay for a minimum of <ms> */
{
        // we use a calibrated macro. This is more
        // accurate and not so much compiler dependent
        // as self made code.
        while(ms){
 89a:	00 97       	sbiw	r24, 0x00	; 0
 89c:	d1 f7       	brne	.-12     	; 0x892 <delay_ms+0x6>
                _delay_ms(0.96);
                ms--;
        }
}
 89e:	08 95       	ret

000008a0 <wd_init>:

void wd_init(void)
{
        // timeout the watchdog after 2 sec:
        wdt_enable(WDTO_2S);
 8a0:	2f e0       	ldi	r18, 0x0F	; 15
 8a2:	88 e1       	ldi	r24, 0x18	; 24
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	f8 94       	cli
 8aa:	a8 95       	wdr
 8ac:	80 93 60 00 	sts	0x0060, r24
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	20 93 60 00 	sts	0x0060, r18
}
 8b6:	08 95       	ret

000008b8 <wd_kick>:

void wd_kick(void)
{
        wdt_reset();
 8b8:	a8 95       	wdr
}
 8ba:	08 95       	ret

000008bc <strcpy>:
 8bc:	fb 01       	movw	r30, r22
 8be:	dc 01       	movw	r26, r24
 8c0:	01 90       	ld	r0, Z+
 8c2:	0d 92       	st	X+, r0
 8c4:	00 20       	and	r0, r0
 8c6:	e1 f7       	brne	.-8      	; 0x8c0 <strcpy+0x4>
 8c8:	08 95       	ret

000008ca <strncmp>:
 8ca:	fb 01       	movw	r30, r22
 8cc:	dc 01       	movw	r26, r24
 8ce:	41 50       	subi	r20, 0x01	; 1
 8d0:	50 40       	sbci	r21, 0x00	; 0
 8d2:	30 f0       	brcs	.+12     	; 0x8e0 <strncmp+0x16>
 8d4:	8d 91       	ld	r24, X+
 8d6:	01 90       	ld	r0, Z+
 8d8:	80 19       	sub	r24, r0
 8da:	19 f4       	brne	.+6      	; 0x8e2 <strncmp+0x18>
 8dc:	00 20       	and	r0, r0
 8de:	b9 f7       	brne	.-18     	; 0x8ce <strncmp+0x4>
 8e0:	88 1b       	sub	r24, r24
 8e2:	99 0b       	sbc	r25, r25
 8e4:	08 95       	ret

000008e6 <_exit>:
 8e6:	f8 94       	cli

000008e8 <__stop_program>:
 8e8:	ff cf       	rjmp	.-2      	; 0x8e8 <__stop_program>
