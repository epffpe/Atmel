
ejemplo1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  00000100  2**0
                  ALLOC
  2 .stab         0000009c  00000000  00000000  00000100  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000025  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000027  00000000  00000000  000001e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000097  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000064  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c0  00000000  00000000  00000303  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000020  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000007b  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 30       	cpi	r26, 0x01	; 1
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	02 d0       	rcall	.+4      	; 0x56 <main>
  52:	1a c0       	rjmp	.+52     	; 0x88 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <main>:

extern void sendpinbits(void);//send to port

int main()

{
  56:	1f 93       	push	r17

	pinbits=1;//set pin 1 as output
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	80 93 00 01 	sts	0x0100, r24

	InitPort();//call subroutine from assembler file
  5e:	08 d0       	rcall	.+16     	; 0x70 <InitPort>

	while(1)//repeat for ever

	{

	pinbits=1;//Pin High
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	10 93 00 01 	sts	0x0100, r17

	sendpinbits();//call subroutine from assembler file
  66:	0a d0       	rcall	.+20     	; 0x7c <sendpinbits>

	pinbits=0;//Pin Low
  68:	10 92 00 01 	sts	0x0100, r1

	sendpinbits();//call subroutine from assembler file
  6c:	07 d0       	rcall	.+14     	; 0x7c <sendpinbits>
  6e:	f9 cf       	rjmp	.-14     	; 0x62 <main+0xc>

00000070 <InitPort>:

.global InitPort				;make accesible globally

InitPort:					;function name  

	push r18				;save register value
  70:	2f 93       	push	r18

	lds r18, pinbits			;load variable to r18
  72:	20 91 00 01 	lds	r18, 0x0100

	out _SFR_IO_ADDR(DDRD), r18	;set pins as output
  76:	2a b9       	out	0x0a, r18	; 10

	pop r18				;restore register
  78:	2f 91       	pop	r18

	ret					;return from subroutine
  7a:	08 95       	ret

0000007c <sendpinbits>:

.global sendpinbits				;make global

sendpinbits:					;function name

	push r18				;save register value
  7c:	2f 93       	push	r18

	lds r18, pinbits			;load variable to r18
  7e:	20 91 00 01 	lds	r18, 0x0100

	out _SFR_IO_ADDR(PORTD), r18	;pins to High
  82:	2b b9       	out	0x0b, r18	; 11

	pop r18				;restore register
  84:	2f 91       	pop	r18

	ret					;return from subroutine
  86:	08 95       	ret

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
