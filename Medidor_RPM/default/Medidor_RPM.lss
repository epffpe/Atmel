
Medidor_RPM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000426  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080011c  0080011c  000004d6  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001e5  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b28  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004db  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000806  00000000  00000000  0000175e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00001f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023d  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020f  00000000  00000000  00002341  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	fa c0       	rjmp	.+500    	; 0x20c <__vector_11>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	6b c1       	rjmp	.+726    	; 0x302 <__vector_21>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e2       	ldi	r30, 0x26	; 38
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	ac 31       	cpi	r26, 0x1C	; 28
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	ac e1       	ldi	r26, 0x1C	; 28
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a5 32       	cpi	r26, 0x25	; 37
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	dc c1       	rjmp	.+952    	; 0x422 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:


int main() {
	//OSCCAL=0x84;
//char T;
	SistIni();
  6c:	0f d1       	rcall	.+542    	; 0x28c <SistIni>
	ADCinit();
  6e:	32 d1       	rcall	.+612    	; 0x2d4 <ADCinit>
	//ADCSRA |=(1<<ADSC);

	while(1){
		//ADCSRA |=(1<<ADSC);
		sleep_mode();
  70:	83 b7       	in	r24, 0x33	; 51
  72:	81 60       	ori	r24, 0x01	; 1
  74:	83 bf       	out	0x33, r24	; 51
  76:	88 95       	sleep
  78:	83 b7       	in	r24, 0x33	; 51
  7a:	8e 7f       	andi	r24, 0xFE	; 254
  7c:	83 bf       	out	0x33, r24	; 51
  7e:	f8 cf       	rjmp	.-16     	; 0x70 <main+0x4>

00000080 <LCD_CMD>:

void LCD_CMD(unsigned char LCD_cmd) {
#ifdef LCD_4bit
//LCD de cuatro bits
   unsigned char temp, sreg;
   sreg=SREG;
  80:	2f b7       	in	r18, 0x3f	; 63
   cli();
  82:	f8 94       	cli
   LCD_DB = LCD_cmd & 0xF0;
  84:	98 2f       	mov	r25, r24
  86:	90 7f       	andi	r25, 0xF0	; 240
  88:	95 b9       	out	0x05, r25	; 5
   //LCD_CB &= ~(1<<LCD_RS);
   LCD_CB |= (1<<LCD_E);
  8a:	2b 9a       	sbi	0x05, 3	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	39 2f       	mov	r19, r25
  90:	3a 95       	dec	r19
  92:	f1 f7       	brne	.-4      	; 0x90 <LCD_CMD+0x10>
   _delay_us(0.25);
   LCD_CB &= ~(1<<LCD_E);
  94:	2b 98       	cbi	0x05, 3	; 5
  96:	32 e0       	ldi	r19, 0x02	; 2
  98:	3a 95       	dec	r19
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_CMD+0x18>
   _delay_us(1);

   temp = LCD_cmd;
   temp = (temp << 4);
   LCD_DB = temp & 0xF0; //(LCD_cmd << 4) & 0xF0;
  9c:	82 95       	swap	r24
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	85 b9       	out	0x05, r24	; 5
   //LCD_CB &= ~(1<<LCD_RS);
   LCD_CB |= (1<<LCD_E);
  a2:	2b 9a       	sbi	0x05, 3	; 5
  a4:	9a 95       	dec	r25
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_CMD+0x24>
   _delay_us(0.25);
   LCD_CB &= ~(1<<LCD_E);
  a8:	2b 98       	cbi	0x05, 3	; 5
   
   SREG=sreg;
  aa:	2f bf       	out	0x3f, r18	; 63
  ac:	8a e6       	ldi	r24, 0x6A	; 106
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <LCD_CMD+0x2e>
   _delay_us(40);
   
#else
// LCD de ocho bits
#endif
}
  b2:	08 95       	ret

000000b4 <LCD_DAT>:

void LCD_DAT(unsigned char LCD_dat) {
#ifdef LCD_4bit
//LCD de cuatro bits
   unsigned char temp, sreg;
   sreg=SREG;
  b4:	2f b7       	in	r18, 0x3f	; 63
   cli();
  b6:	f8 94       	cli

   LCD_DB = (LCD_dat & 0xF0) | (1<<LCD_RS);
  b8:	98 2f       	mov	r25, r24
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	94 60       	ori	r25, 0x04	; 4
  be:	95 b9       	out	0x05, r25	; 5
   //LCD_CB |= (1<<LCD_RS);
   LCD_CB |= (1<<LCD_E);
  c0:	2b 9a       	sbi	0x05, 3	; 5
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	39 2f       	mov	r19, r25
  c6:	3a 95       	dec	r19
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCD_DAT+0x12>
   _delay_us(0.25);
   LCD_CB &= ~(1<<LCD_E);
  ca:	2b 98       	cbi	0x05, 3	; 5
  cc:	32 e0       	ldi	r19, 0x02	; 2
  ce:	3a 95       	dec	r19
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_DAT+0x1a>
   _delay_us(1);

   temp = LCD_dat;
   temp = (temp << 4);
   LCD_DB = (temp & 0xF0) | (1<<LCD_RS);
  d2:	82 95       	swap	r24
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	85 b9       	out	0x05, r24	; 5
   //LCD_CB |= (1<<LCD_RS);
   LCD_CB |= (1<<LCD_E);
  da:	2b 9a       	sbi	0x05, 3	; 5
  dc:	9a 95       	dec	r25
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_DAT+0x28>
   _delay_us(0.25);
   LCD_CB &= ~(1<<LCD_E);
  e0:	2b 98       	cbi	0x05, 3	; 5
   
   SREG=sreg;
  e2:	2f bf       	out	0x3f, r18	; 63
  e4:	8a e6       	ldi	r24, 0x6A	; 106
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_DAT+0x32>
   _delay_us(40);
   
#else
// LCD de ocho bits
#endif
}
  ea:	08 95       	ret

000000ec <LCD_Init>:

void LCD_Init( void ) {
   LCD_DB = 0;
  ec:	15 b8       	out	0x05, r1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ee:	80 e3       	ldi	r24, 0x30	; 48
  f0:	95 e7       	ldi	r25, 0x75	; 117
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Init+0x6>
#ifdef LCD_4bit
//LCD de cuatro bits
   _delay_ms(15);
   LCD_DB = 0x30 | (1<<LCD_E);
  f6:	98 e3       	ldi	r25, 0x38	; 56
  f8:	95 b9       	out	0x05, r25	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	82 2f       	mov	r24, r18
  fe:	8a 95       	dec	r24
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Init+0x12>
   _delay_us(0.25);
   LCD_DB = 0x30 & ~(1<<LCD_E);
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	85 b9       	out	0x05, r24	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 106:	e8 e0       	ldi	r30, 0x08	; 8
 108:	f0 e2       	ldi	r31, 0x20	; 32
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_Init+0x1e>
   _delay_ms(4.1);
   LCD_DB = 0x30 | (1<<LCD_E);
 10e:	95 b9       	out	0x05, r25	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 110:	32 2f       	mov	r19, r18
 112:	3a 95       	dec	r19
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Init+0x26>
   _delay_us(0.25);
   LCD_DB = 0x30 & ~(1<<LCD_E);
 116:	85 b9       	out	0x05, r24	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 118:	e8 ec       	ldi	r30, 0xC8	; 200
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_Init+0x30>
   _delay_us(100);
   LCD_DB = 0x30 | (1<<LCD_E);
 120:	95 b9       	out	0x05, r25	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 122:	92 2f       	mov	r25, r18
 124:	9a 95       	dec	r25
 126:	f1 f7       	brne	.-4      	; 0x124 <LCD_Init+0x38>
   _delay_us(0.25);
   LCD_DB = 0x30 & ~(1<<LCD_E);
 128:	85 b9       	out	0x05, r24	; 5
 12a:	9a e6       	ldi	r25, 0x6A	; 106
 12c:	89 2f       	mov	r24, r25
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_Init+0x42>
   _delay_us(40);
   LCD_DB = 0x20 | (1<<LCD_E);
 132:	88 e2       	ldi	r24, 0x28	; 40
 134:	85 b9       	out	0x05, r24	; 5
 136:	2a 95       	dec	r18
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_Init+0x4a>
   _delay_us(0.25);
   LCD_DB = 0x20 & ~(1<<LCD_E);
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <LCD_Init+0x52>
   _delay_us(40);
#else
// LCD de ocho bits
#endif
}
 142:	08 95       	ret

00000144 <LCD_Display_conf>:

void LCD_Display_conf( void) {
   // Function set command 0x28
   LCD_CMD(0x28);
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	9c df       	rcall	.-200    	; 0x80 <LCD_CMD>
   // Entry Mode Set command, 0x06
   LCD_CMD(0x06);
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	9a df       	rcall	.-204    	; 0x80 <LCD_CMD>
   // Display On/Off command, 0x0C,
   LCD_CMD(0x0c);
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	98 df       	rcall	.-208    	; 0x80 <LCD_CMD>
   // Clear Display command, 0x01 y 1.64ms
   LCD_CMD(0x01);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	96 df       	rcall	.-212    	; 0x80 <LCD_CMD>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 154:	80 ed       	ldi	r24, 0xD0	; 208
 156:	9c e0       	ldi	r25, 0x0C	; 12
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCD_Display_conf+0x14>
   _delay_ms(1.64);
}
 15c:	08 95       	ret

0000015e <LCD_enviar_msg>:

void LCD_enviar_msg(char *msg) {
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ec 01       	movw	r28, r24
 164:	02 c0       	rjmp	.+4      	; 0x16a <LCD_enviar_msg+0xc>
   while(*msg) LCD_DAT(*msg++);
 166:	21 96       	adiw	r28, 0x01	; 1
 168:	a5 df       	rcall	.-182    	; 0xb4 <LCD_DAT>
 16a:	88 81       	ld	r24, Y
 16c:	88 23       	and	r24, r24
 16e:	d9 f7       	brne	.-10     	; 0x166 <LCD_enviar_msg+0x8>
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <LCD_GotoXY>:

void LCD_GotoXY(uint8_t x, uint8_t y) {   //Mueve el cursor a la posicion X Y

   register uint8_t DDRAMAddr;
   // Mapea en la direccion real
   switch(y)
 176:	62 30       	cpi	r22, 0x02	; 2
 178:	31 f0       	breq	.+12     	; 0x186 <LCD_GotoXY+0x10>
 17a:	63 30       	cpi	r22, 0x03	; 3
 17c:	31 f0       	breq	.+12     	; 0x18a <LCD_GotoXY+0x14>
 17e:	61 30       	cpi	r22, 0x01	; 1
 180:	29 f4       	brne	.+10     	; 0x18c <LCD_GotoXY+0x16>
   {
   case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
   case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 182:	80 5c       	subi	r24, 0xC0	; 192
 184:	03 c0       	rjmp	.+6      	; 0x18c <LCD_GotoXY+0x16>
   case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 186:	8c 5e       	subi	r24, 0xEC	; 236
 188:	01 c0       	rjmp	.+2      	; 0x18c <LCD_GotoXY+0x16>
   case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 18a:	8c 5a       	subi	r24, 0xAC	; 172
   default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
   }
   // Envia la direccion
   LCD_CMD(1<<LCD_DDRAM | DDRAMAddr);
 18c:	80 68       	ori	r24, 0x80	; 128
 18e:	78 df       	rcall	.-272    	; 0x80 <LCD_CMD>
   
}
 190:	08 95       	ret

00000192 <USART_Init>:
//Ejemplo:
//	USART_Init(MYUBRR);
*/
void USART_Init(unsigned int ubrr) {
	//Se fija el baudrate
	UBRR0H = (unsigned char)(ubrr>>8);
 192:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 196:	80 93 c4 00 	sts	0x00C4, r24

	//Se habilita el envio y recepcion
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	80 93 c1 00 	sts	0x00C1, r24
	//Formato: 8dato, 2stop bit
	UCSR0C = (1<<USBS0)|(2<<UCSZ00);
 1a0:	8c e0       	ldi	r24, 0x0C	; 12
 1a2:	80 93 c2 00 	sts	0x00C2, r24

}
 1a6:	08 95       	ret

000001a8 <USART_Transmit>:
//Transmitir un char en la USART
//Ejemplo:
//
//	USART_Transmit('a');
*/
void USART_Transmit(unsigned char data) {
 1a8:	98 2f       	mov	r25, r24
	//Espera a que el buffer se vacie
	while( !(UCSR0A &(1<<UDRE0)) )
 1aa:	80 91 c0 00 	lds	r24, 0x00C0
 1ae:	85 ff       	sbrs	r24, 5
 1b0:	fc cf       	rjmp	.-8      	; 0x1aa <USART_Transmit+0x2>
		;	
	//Coloca data en buffer, envia data
	UDR0=data;
 1b2:	90 93 c6 00 	sts	0x00C6, r25

}
 1b6:	08 95       	ret

000001b8 <USART_Receive>:
//	unsigned char a;
//	a = USART_Receive();
*/
unsigned char USART_Receive( void ) {
	//Espera a que se reciba un dato
	while ( !(UCSR0A & (1<<RXC0)) )
 1b8:	80 91 c0 00 	lds	r24, 0x00C0
 1bc:	87 ff       	sbrs	r24, 7
 1be:	fc cf       	rjmp	.-8      	; 0x1b8 <USART_Receive>
		;
	//coge y devuelve el dato recibido del buffer
	return UDR0;
 1c0:	80 91 c6 00 	lds	r24, 0x00C6

}
 1c4:	08 95       	ret

000001c6 <USART_Flush>:
//Vaciar el buffer de entrada de la USART
//Ejemplo:
//
//	USART_Flush();
*/
void USART_Flush ( void ) {
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <USART_Flush+0x6>
unsigned char envase;
	while ( UCSR0A & (1<<RXC0) ) envase = UDR0;
 1c8:	80 91 c6 00 	lds	r24, 0x00C6
 1cc:	80 91 c0 00 	lds	r24, 0x00C0
 1d0:	87 fd       	sbrc	r24, 7
 1d2:	fa cf       	rjmp	.-12     	; 0x1c8 <USART_Flush+0x2>

}
 1d4:	08 95       	ret

000001d6 <UART_enviaCadena>:

void UART_enviaCadena(unsigned char *msg) {
 1d6:	fc 01       	movw	r30, r24
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <UART_enviaCadena+0x12>
//
//	USART_Transmit('a');
*/
void USART_Transmit(unsigned char data) {
	//Espera a que el buffer se vacie
	while( !(UCSR0A &(1<<UDRE0)) )
 1da:	80 91 c0 00 	lds	r24, 0x00C0
 1de:	85 ff       	sbrs	r24, 5
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <UART_enviaCadena+0x4>
	while ( UCSR0A & (1<<RXC0) ) envase = UDR0;

}

void UART_enviaCadena(unsigned char *msg) {
	while(*msg) USART_Transmit(*msg++);
 1e2:	31 96       	adiw	r30, 0x01	; 1
void USART_Transmit(unsigned char data) {
	//Espera a que el buffer se vacie
	while( !(UCSR0A &(1<<UDRE0)) )
		;	
	//Coloca data en buffer, envia data
	UDR0=data;
 1e4:	90 93 c6 00 	sts	0x00C6, r25
	while ( UCSR0A & (1<<RXC0) ) envase = UDR0;

}

void UART_enviaCadena(unsigned char *msg) {
	while(*msg) USART_Transmit(*msg++);
 1e8:	90 81       	ld	r25, Z
 1ea:	99 23       	and	r25, r25
 1ec:	b1 f7       	brne	.-20     	; 0x1da <UART_enviaCadena+0x4>
}
 1ee:	08 95       	ret

000001f0 <inicia_cuenta>:
/*
 *	
 */

void inicia_cuenta(void) {
	TCNT0= 0;
 1f0:	16 bc       	out	0x26, r1	; 38
}
 1f2:	08 95       	ret

000001f4 <pulsos2freq>:

/*
 *	Si cuenta 300ms, 1/0.3=3.33
 */
uint16_t pulsos2freq(uint8_t pulsos) {
 1f4:	93 e0       	ldi	r25, 0x03	; 3
 1f6:	89 9f       	mul	r24, r25
 1f8:	90 01       	movw	r18, r0
 1fa:	11 24       	eor	r1, r1
	return (3 * (uint16_t)pulsos);
}
 1fc:	c9 01       	movw	r24, r18
 1fe:	08 95       	ret

00000200 <pulsos2rpm>:


/*
 *	Si cuenta 300ms, 60/300m=200
 */
uint16_t pulsos2rpm(uint8_t pulsos) {
 200:	98 ec       	ldi	r25, 0xC8	; 200
 202:	89 9f       	mul	r24, r25
 204:	90 01       	movw	r18, r0
 206:	11 24       	eor	r1, r1
	return (200 * (uint16_t)pulsos);
}
 208:	c9 01       	movw	r24, r18
 20a:	08 95       	ret

0000020c <__vector_11>:

/*
 *	
 */
ISR (TIMER1_COMPA_vect) {
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	pulsos=TCNT0;
 232:	86 b5       	in	r24, 0x26	; 38
 234:	80 93 24 01 	sts	0x0124, r24
/*
 *	
 */

void inicia_cuenta(void) {
	TCNT0= 0;
 238:	16 bc       	out	0x26, r1	; 38

/*
 *	Si cuenta 300ms, 60/300m=200
 */
uint16_t pulsos2rpm(uint8_t pulsos) {
	return (200 * (uint16_t)pulsos);
 23a:	28 ec       	ldi	r18, 0xC8	; 200
 23c:	82 9f       	mul	r24, r18
 23e:	c0 01       	movw	r24, r0
 240:	11 24       	eor	r1, r1
 *	
 */
ISR (TIMER1_COMPA_vect) {
	pulsos=TCNT0;
	inicia_cuenta();
	RPM=pulsos2rpm(pulsos);
 242:	90 93 1d 01 	sts	0x011D, r25
 246:	80 93 1c 01 	sts	0x011C, r24
	utoa(RPM, s, 10);
 24a:	0e e1       	ldi	r16, 0x1E	; 30
 24c:	11 e0       	ldi	r17, 0x01	; 1
 24e:	b8 01       	movw	r22, r16
 250:	4a e0       	ldi	r20, 0x0A	; 10
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	c2 d0       	rcall	.+388    	; 0x3da <utoa>
	LCD_GotoXY(6, 1);
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	8d df       	rcall	.-230    	; 0x176 <LCD_GotoXY>
	LCD_enviar_msg(s);
 25c:	c8 01       	movw	r24, r16
 25e:	7f df       	rcall	.-258    	; 0x15e <LCD_enviar_msg>
   	LCD_enviar_msg(" rpm      ");
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	7c df       	rcall	.-264    	; 0x15e <LCD_enviar_msg>
}
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <SistIni>:
 *	
 */

void SistIni(void) {
	//Calibracion del oscilador RC
	OSCCAL=0x84;
 28c:	84 e8       	ldi	r24, 0x84	; 132
 28e:	80 93 66 00 	sts	0x0066, r24
	//PuertoB como salida
	DDRB=0xff;
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	84 b9       	out	0x04, r24	; 4
	//PuertoD como entrada y PULLUP
	PORTD=0xff;
 296:	8b b9       	out	0x0b, r24	; 11

	/*
	 * Inicializacion del LCD
	 */
	LCD_Init();
 298:	29 df       	rcall	.-430    	; 0xec <LCD_Init>
 	LCD_Display_conf();
 29a:	54 df       	rcall	.-344    	; 0x144 <LCD_Display_conf>
	LCD_GotoXY(0, 0);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	6a df       	rcall	.-300    	; 0x176 <LCD_GotoXY>
   	LCD_enviar_msg("Gases:");
 2a2:	8b e0       	ldi	r24, 0x0B	; 11
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	5b df       	rcall	.-330    	; 0x15e <LCD_enviar_msg>
   	LCD_GotoXY(0, 1);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	64 df       	rcall	.-312    	; 0x176 <LCD_GotoXY>
   	LCD_enviar_msg("Rev:");
 2ae:	82 e1       	ldi	r24, 0x12	; 18
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	55 df       	rcall	.-342    	; 0x15e <LCD_enviar_msg>
	/*
	 * Inicializacion del timer0
	 * 
	 */

	TCCR0B = (7<<CS00);
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	85 bd       	out	0x25, r24	; 37

	/*
	 * Inicializacion del timer1 como generador de interrupcion cada
	 * 300ms
	 */
 	OCR1A=2273; 		//2343.75
 2b8:	81 ee       	ldi	r24, 0xE1	; 225
 2ba:	98 e0       	ldi	r25, 0x08	; 8
 2bc:	90 93 89 00 	sts	0x0089, r25
 2c0:	80 93 88 00 	sts	0x0088, r24
	TIMSK1=(1<<OCIE1A);
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B=(1<<WGM12)|5;
 2ca:	8d e0       	ldi	r24, 0x0D	; 13
 2cc:	80 93 81 00 	sts	0x0081, r24
	//set_sleep_mode(SLEEP_MODE_IDLE);
	sei();
 2d0:	78 94       	sei
}
 2d2:	08 95       	ret

000002d4 <ADCinit>:
#include "ConversorADC.h"

void ADCinit( void ) {
	// Activo ADC, Autotrigrer, ADCinterrupcion y divisor por 128
	ADCSRA=(1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(7<<ADPS0);
 2d4:	8f ea       	ldi	r24, 0xAF	; 175
 2d6:	80 93 7a 00 	sts	0x007A, r24
	// 
	ADCSRB=(0<<ADTS0);
 2da:	10 92 7b 00 	sts	0x007B, r1
	// Entrada Temperatura,Referencia de voltage 1.1V
	ADMUX=(1<<REFS0)|(1<<ADLAR)|(0x0<<MUX0);		
 2de:	80 e6       	ldi	r24, 0x60	; 96
 2e0:	80 93 7c 00 	sts	0x007C, r24
}
 2e4:	08 95       	ret

000002e6 <leer8ADC>:

char leer8ADC( void ) {
	return ADCH;
 2e6:	80 91 79 00 	lds	r24, 0x0079
}
 2ea:	08 95       	ret

000002ec <leerADC>:

int leerADC ( void ) {
	char temp;
	temp = ADCL;
 2ec:	20 91 78 00 	lds	r18, 0x0078
	return ((ADCH<<8)| temp);
 2f0:	40 91 79 00 	lds	r20, 0x0079
 2f4:	94 2f       	mov	r25, r20
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	28 2b       	or	r18, r24
 2fc:	39 2b       	or	r19, r25
}
 2fe:	c9 01       	movw	r24, r18
 300:	08 95       	ret

00000302 <__vector_21>:

ISR(SIG_ADC) {
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
 324:	ef 93       	push	r30
 326:	ff 93       	push	r31
	// Entrada Temperatura,Referencia de voltage 1.1V
	ADMUX=(1<<REFS0)|(1<<ADLAR)|(0x0<<MUX0);		
}

char leer8ADC( void ) {
	return ADCH;
 328:	80 91 79 00 	lds	r24, 0x0079
	return ((ADCH<<8)| temp);
}

ISR(SIG_ADC) {
int T;
	T=(int)leer8ADC();
 32c:	90 e0       	ldi	r25, 0x00	; 0
	T*=100;
	T/=255;
	utoa(T, s, 10);
 32e:	24 e6       	ldi	r18, 0x64	; 100
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	ac 01       	movw	r20, r24
 334:	42 9f       	mul	r20, r18
 336:	c0 01       	movw	r24, r0
 338:	43 9f       	mul	r20, r19
 33a:	90 0d       	add	r25, r0
 33c:	52 9f       	mul	r21, r18
 33e:	90 0d       	add	r25, r0
 340:	11 24       	eor	r1, r1
 342:	6f ef       	ldi	r22, 0xFF	; 255
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	22 d0       	rcall	.+68     	; 0x38c <__divmodhi4>
 348:	cb 01       	movw	r24, r22
 34a:	0e e1       	ldi	r16, 0x1E	; 30
 34c:	11 e0       	ldi	r17, 0x01	; 1
 34e:	b8 01       	movw	r22, r16
 350:	4a e0       	ldi	r20, 0x0A	; 10
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	42 d0       	rcall	.+132    	; 0x3da <utoa>
	LCD_GotoXY(12, 0);
 356:	8c e0       	ldi	r24, 0x0C	; 12
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	0d df       	rcall	.-486    	; 0x176 <LCD_GotoXY>
	LCD_enviar_msg(s);
 35c:	c8 01       	movw	r24, r16
 35e:	ff de       	rcall	.-514    	; 0x15e <LCD_enviar_msg>
	LCD_enviar_msg("%  ");
 360:	87 e1       	ldi	r24, 0x17	; 23
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	fc de       	rcall	.-520    	; 0x15e <LCD_enviar_msg>
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	7f 91       	pop	r23
 374:	6f 91       	pop	r22
 376:	5f 91       	pop	r21
 378:	4f 91       	pop	r20
 37a:	3f 91       	pop	r19
 37c:	2f 91       	pop	r18
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__divmodhi4>:
 38c:	97 fb       	bst	r25, 7
 38e:	09 2e       	mov	r0, r25
 390:	07 26       	eor	r0, r23
 392:	0a d0       	rcall	.+20     	; 0x3a8 <__divmodhi4_neg1>
 394:	77 fd       	sbrc	r23, 7
 396:	04 d0       	rcall	.+8      	; 0x3a0 <__divmodhi4_neg2>
 398:	0c d0       	rcall	.+24     	; 0x3b2 <__udivmodhi4>
 39a:	06 d0       	rcall	.+12     	; 0x3a8 <__divmodhi4_neg1>
 39c:	00 20       	and	r0, r0
 39e:	1a f4       	brpl	.+6      	; 0x3a6 <__divmodhi4_exit>

000003a0 <__divmodhi4_neg2>:
 3a0:	70 95       	com	r23
 3a2:	61 95       	neg	r22
 3a4:	7f 4f       	sbci	r23, 0xFF	; 255

000003a6 <__divmodhi4_exit>:
 3a6:	08 95       	ret

000003a8 <__divmodhi4_neg1>:
 3a8:	f6 f7       	brtc	.-4      	; 0x3a6 <__divmodhi4_exit>
 3aa:	90 95       	com	r25
 3ac:	81 95       	neg	r24
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	08 95       	ret

000003b2 <__udivmodhi4>:
 3b2:	aa 1b       	sub	r26, r26
 3b4:	bb 1b       	sub	r27, r27
 3b6:	51 e1       	ldi	r21, 0x11	; 17
 3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <__udivmodhi4_ep>

000003ba <__udivmodhi4_loop>:
 3ba:	aa 1f       	adc	r26, r26
 3bc:	bb 1f       	adc	r27, r27
 3be:	a6 17       	cp	r26, r22
 3c0:	b7 07       	cpc	r27, r23
 3c2:	10 f0       	brcs	.+4      	; 0x3c8 <__udivmodhi4_ep>
 3c4:	a6 1b       	sub	r26, r22
 3c6:	b7 0b       	sbc	r27, r23

000003c8 <__udivmodhi4_ep>:
 3c8:	88 1f       	adc	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	5a 95       	dec	r21
 3ce:	a9 f7       	brne	.-22     	; 0x3ba <__udivmodhi4_loop>
 3d0:	80 95       	com	r24
 3d2:	90 95       	com	r25
 3d4:	bc 01       	movw	r22, r24
 3d6:	cd 01       	movw	r24, r26
 3d8:	08 95       	ret

000003da <utoa>:
 3da:	fb 01       	movw	r30, r22
 3dc:	9f 01       	movw	r18, r30
 3de:	42 30       	cpi	r20, 0x02	; 2
 3e0:	6c f0       	brlt	.+26     	; 0x3fc <utoa+0x22>
 3e2:	45 32       	cpi	r20, 0x25	; 37
 3e4:	5c f4       	brge	.+22     	; 0x3fc <utoa+0x22>
 3e6:	64 2f       	mov	r22, r20
 3e8:	77 27       	eor	r23, r23
 3ea:	e3 df       	rcall	.-58     	; 0x3b2 <__udivmodhi4>
 3ec:	80 5d       	subi	r24, 0xD0	; 208
 3ee:	8a 33       	cpi	r24, 0x3A	; 58
 3f0:	0c f0       	brlt	.+2      	; 0x3f4 <utoa+0x1a>
 3f2:	89 5d       	subi	r24, 0xD9	; 217
 3f4:	81 93       	st	Z+, r24
 3f6:	cb 01       	movw	r24, r22
 3f8:	00 97       	sbiw	r24, 0x00	; 0
 3fa:	a9 f7       	brne	.-22     	; 0x3e6 <utoa+0xc>
 3fc:	10 82       	st	Z, r1
 3fe:	c9 01       	movw	r24, r18
 400:	00 c0       	rjmp	.+0      	; 0x402 <strrev>

00000402 <strrev>:
 402:	dc 01       	movw	r26, r24
 404:	fc 01       	movw	r30, r24
 406:	67 2f       	mov	r22, r23
 408:	71 91       	ld	r23, Z+
 40a:	77 23       	and	r23, r23
 40c:	e1 f7       	brne	.-8      	; 0x406 <strrev+0x4>
 40e:	32 97       	sbiw	r30, 0x02	; 2
 410:	04 c0       	rjmp	.+8      	; 0x41a <strrev+0x18>
 412:	7c 91       	ld	r23, X
 414:	6d 93       	st	X+, r22
 416:	70 83       	st	Z, r23
 418:	62 91       	ld	r22, -Z
 41a:	ae 17       	cp	r26, r30
 41c:	bf 07       	cpc	r27, r31
 41e:	c8 f3       	brcs	.-14     	; 0x412 <strrev+0x10>
 420:	08 95       	ret

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
