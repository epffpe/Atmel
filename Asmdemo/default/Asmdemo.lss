
Asmdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000274  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006a  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000012c  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b7  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001da  00000000  00000000  000004e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c7  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	94 c0       	rjmp	.+296    	; 0x12e <__vector_2>
   6:	8e c0       	rjmp	.+284    	; 0x124 <__vector_3>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	86 c0       	rjmp	.+268    	; 0x11a <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a5 36       	cpi	r26, 0x65	; 101
  28:	b1 07       	cpc	r27, r17
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	16 d0       	rcall	.+44     	; 0x5a <main>
  2e:	e6 c0       	rjmp	.+460    	; 0x1fc <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <ioinit>:
intbits;

void
ioinit(void)
{
  counter_hi = 0;
  32:	44 24       	eor	r4, r4
  flags = 0;
  34:	00 e0       	ldi	r16, 0x00	; 0

  /*
   * Timer 0 runs as phase-correct PWM at full clock, OC0B connects to
   * the PWM engine.
   */
  TCCR0A = (1 << COM0B1) | (1 << WGM00);
  36:	81 e2       	ldi	r24, 0x21	; 33
  38:	8f bd       	out	0x2f, r24	; 47
  TCCR0B = (1 << CS00);
  3a:	81 e0       	ldi	r24, 0x01	; 1
  3c:	83 bf       	out	0x33, r24	; 51
  OCR0A = 255;
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	86 bf       	out	0x36, r24	; 54

#if defined(__AVR_ATtiny13__)
  TIMSK0 = (1 << TOIE0) | (1 << OCIE0A);
  42:	86 e0       	ldi	r24, 0x06	; 6
  44:	89 bf       	out	0x39, r24	; 57

#else
# error "Don't know how to run on your MCU_TYPE."
#endif

  PCMSK = (1 << 4);
  46:	80 e1       	ldi	r24, 0x10	; 16
  48:	85 bb       	out	0x15, r24	; 21
  GIFR = (1 << PCIF);
  4a:	80 e2       	ldi	r24, 0x20	; 32
  4c:	8a bf       	out	0x3a, r24	; 58
  GIMSK = (1 << PCIE);
  4e:	8b bf       	out	0x3b, r24	; 59

  DDRB = (1 << PB1);
  50:	82 e0       	ldi	r24, 0x02	; 2
  52:	87 bb       	out	0x17, r24	; 23
  PORTB = 0;
  54:	18 ba       	out	0x18, r1	; 24

  sei();
  56:	78 94       	sei
}
  58:	08 95       	ret

0000005a <main>:
}
#endif /* ATtinyX5 */

int
main(void)
{
  5a:	ef 92       	push	r14
  5c:	ff 92       	push	r15
  5e:	1f 93       	push	r17
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
intbits;

void
ioinit(void)
{
  counter_hi = 0;
  64:	44 24       	eor	r4, r4
  flags = 0;
  66:	00 e0       	ldi	r16, 0x00	; 0

  /*
   * Timer 0 runs as phase-correct PWM at full clock, OC0B connects to
   * the PWM engine.
   */
  TCCR0A = (1 << COM0B1) | (1 << WGM00);
  68:	81 e2       	ldi	r24, 0x21	; 33
  6a:	8f bd       	out	0x2f, r24	; 47
  TCCR0B = (1 << CS00);
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	83 bf       	out	0x33, r24	; 51
  OCR0A = 255;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	86 bf       	out	0x36, r24	; 54

#if defined(__AVR_ATtiny13__)
  TIMSK0 = (1 << TOIE0) | (1 << OCIE0A);
  74:	86 e0       	ldi	r24, 0x06	; 6
  76:	89 bf       	out	0x39, r24	; 57

#else
# error "Don't know how to run on your MCU_TYPE."
#endif

  PCMSK = (1 << 4);
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	85 bb       	out	0x15, r24	; 21
  GIFR = (1 << PCIF);
  7c:	80 e2       	ldi	r24, 0x20	; 32
  7e:	8a bf       	out	0x3a, r24	; 58
  GIMSK = (1 << PCIE);
  80:	8b bf       	out	0x3b, r24	; 59

  DDRB = (1 << PB1);
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	87 bb       	out	0x17, r24	; 23
  PORTB = 0;
  86:	18 ba       	out	0x18, r1	; 24

  sei();
  88:	78 94       	sei
	    pwm_incoming = MAX_PWM_VAL;
	  OCR0B = (pwm_incoming - MIN_PWM_VAL) * 255ul / (MAX_PWM_VAL - MIN_PWM_VAL);
#else
	  OCR0B = (pwm_incoming - MIN_PWM_VAL) * 255u / (MAX_PWM_VAL - MIN_PWM_VAL);
#endif
	  GIFR = (1 << PCIF);
  8a:	10 e2       	ldi	r17, 0x20	; 32
	  intbits.pwm_received = 0;
#if defined(__AVR_ATtiny13__)
	  if (pwm_incoming < MIN_PWM_VAL)
	    pwm_incoming = MIN_PWM_VAL;
	  else if (pwm_incoming > MAX_PWM_VAL)
	    pwm_incoming = MAX_PWM_VAL;
  8c:	80 ef       	ldi	r24, 0xF0	; 240
  8e:	e8 2e       	mov	r14, r24
  90:	89 e0       	ldi	r24, 0x09	; 9
  92:	f8 2e       	mov	r15, r24
      if (intbits.pwm_received)
	{
	  intbits.pwm_received = 0;
#if defined(__AVR_ATtiny13__)
	  if (pwm_incoming < MIN_PWM_VAL)
	    pwm_incoming = MIN_PWM_VAL;
  94:	c0 e5       	ldi	r28, 0x50	; 80
  96:	d4 e0       	ldi	r29, 0x04	; 4

  ioinit();

  for (;;)
    {
      if (intbits.pwm_received)
  98:	80 91 64 00 	lds	r24, 0x0064
  9c:	80 ff       	sbrs	r24, 0
  9e:	35 c0       	rjmp	.+106    	; 0x10a <__stack+0x6b>
	{
	  intbits.pwm_received = 0;
  a0:	80 91 64 00 	lds	r24, 0x0064
  a4:	8e 7f       	andi	r24, 0xFE	; 254
  a6:	80 93 64 00 	sts	0x0064, r24
#if defined(__AVR_ATtiny13__)
	  if (pwm_incoming < MIN_PWM_VAL)
  aa:	80 91 62 00 	lds	r24, 0x0062
  ae:	90 91 63 00 	lds	r25, 0x0063
  b2:	80 55       	subi	r24, 0x50	; 80
  b4:	94 40       	sbci	r25, 0x04	; 4
  b6:	28 f4       	brcc	.+10     	; 0xc2 <__stack+0x23>
	    pwm_incoming = MIN_PWM_VAL;
  b8:	d0 93 63 00 	sts	0x0063, r29
  bc:	c0 93 62 00 	sts	0x0062, r28
  c0:	0b c0       	rjmp	.+22     	; 0xd8 <__stack+0x39>
	  else if (pwm_incoming > MAX_PWM_VAL)
  c2:	80 91 62 00 	lds	r24, 0x0062
  c6:	90 91 63 00 	lds	r25, 0x0063
  ca:	81 5f       	subi	r24, 0xF1	; 241
  cc:	99 40       	sbci	r25, 0x09	; 9
  ce:	20 f0       	brcs	.+8      	; 0xd8 <__stack+0x39>
	    pwm_incoming = MAX_PWM_VAL;
  d0:	f0 92 63 00 	sts	0x0063, r15
  d4:	e0 92 62 00 	sts	0x0062, r14
	  OCR0B = (pwm_incoming - MIN_PWM_VAL) * 255ul / (MAX_PWM_VAL - MIN_PWM_VAL);
  d8:	60 91 62 00 	lds	r22, 0x0062
  dc:	70 91 63 00 	lds	r23, 0x0063
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	4c d0       	rcall	.+152    	; 0x186 <__mulsi3>
  ee:	60 5b       	subi	r22, 0xB0	; 176
  f0:	7b 44       	sbci	r23, 0x4B	; 75
  f2:	84 40       	sbci	r24, 0x04	; 4
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	20 ea       	ldi	r18, 0xA0	; 160
  f8:	35 e0       	ldi	r19, 0x05	; 5
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	5c d0       	rcall	.+184    	; 0x1b8 <__udivmodsi4>
 100:	29 bd       	out	0x29, r18	; 41
#else
	  OCR0B = (pwm_incoming - MIN_PWM_VAL) * 255u / (MAX_PWM_VAL - MIN_PWM_VAL);
#endif
	  GIFR = (1 << PCIF);
 102:	1a bf       	out	0x3a, r17	; 58
	  GIMSK |= (1 << PCIE);
 104:	8b b7       	in	r24, 0x3b	; 59
 106:	80 62       	ori	r24, 0x20	; 32
 108:	8b bf       	out	0x3b, r24	; 59
	}
      sleep_mode();
 10a:	85 b7       	in	r24, 0x35	; 53
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	85 bf       	out	0x35, r24	; 53
 110:	88 95       	sleep
 112:	85 b7       	in	r24, 0x35	; 53
 114:	8f 7d       	andi	r24, 0xDF	; 223
 116:	85 bf       	out	0x35, r24	; 53
 118:	bf cf       	rjmp	.-130    	; 0x98 <main+0x3e>

0000011a <__vector_6>:
 11a:	2f b6       	in	r2, 0x3f	; 63
 11c:	43 94       	inc	r4
 11e:	00 27       	eor	r16, r16
 120:	2f be       	out	0x3f, r2	; 63
 122:	18 95       	reti

00000124 <__vector_3>:
 124:	2f b6       	in	r2, 0x3f	; 63
 126:	43 94       	inc	r4
 128:	0f ef       	ldi	r16, 0xFF	; 255
 12a:	2f be       	out	0x3f, r2	; 63
 12c:	18 95       	reti

0000012e <__vector_2>:
 12e:	2f b6       	in	r2, 0x3f	; 63
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	78 94       	sei
 13a:	42 b7       	in	r20, 0x32	; 50
 13c:	f8 94       	cli
 13e:	54 2d       	mov	r21, r4
 140:	30 2f       	mov	r19, r16
 142:	78 94       	sei
 144:	30 ff       	sbrs	r19, 0
 146:	40 95       	com	r20
 148:	b4 9b       	sbis	0x16, 4	; 22
 14a:	05 c0       	rjmp	.+10     	; 0x156 <__vector_2+0x28>
 14c:	50 93 61 00 	sts	0x0061, r21
 150:	40 93 60 00 	sts	0x0060, r20
 154:	12 c0       	rjmp	.+36     	; 0x17a <__vector_2+0x4c>
 156:	2b b7       	in	r18, 0x3b	; 59
 158:	2f 7d       	andi	r18, 0xDF	; 223
 15a:	2b bf       	out	0x3b, r18	; 59
 15c:	30 91 61 00 	lds	r19, 0x0061
 160:	20 91 60 00 	lds	r18, 0x0060
 164:	42 1b       	sub	r20, r18
 166:	53 0b       	sbc	r21, r19
 168:	50 93 63 00 	sts	0x0063, r21
 16c:	40 93 62 00 	sts	0x0062, r20
 170:	20 91 64 00 	lds	r18, 0x0064
 174:	21 60       	ori	r18, 0x01	; 1
 176:	20 93 64 00 	sts	0x0064, r18
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	2f be       	out	0x3f, r2	; 63
 184:	18 95       	reti

00000186 <__mulsi3>:
 186:	ff 27       	eor	r31, r31
 188:	ee 27       	eor	r30, r30
 18a:	bb 27       	eor	r27, r27
 18c:	aa 27       	eor	r26, r26

0000018e <__mulsi3_loop>:
 18e:	60 ff       	sbrs	r22, 0
 190:	04 c0       	rjmp	.+8      	; 0x19a <__mulsi3_skip1>
 192:	a2 0f       	add	r26, r18
 194:	b3 1f       	adc	r27, r19
 196:	e4 1f       	adc	r30, r20
 198:	f5 1f       	adc	r31, r21

0000019a <__mulsi3_skip1>:
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	44 1f       	adc	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	77 95       	ror	r23
 1a8:	67 95       	ror	r22
 1aa:	89 f7       	brne	.-30     	; 0x18e <__mulsi3_loop>
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	76 07       	cpc	r23, r22
 1b0:	71 f7       	brne	.-36     	; 0x18e <__mulsi3_loop>

000001b2 <__mulsi3_exit>:
 1b2:	cf 01       	movw	r24, r30
 1b4:	bd 01       	movw	r22, r26
 1b6:	08 95       	ret

000001b8 <__udivmodsi4>:
 1b8:	a1 e2       	ldi	r26, 0x21	; 33
 1ba:	1a 2e       	mov	r1, r26
 1bc:	aa 1b       	sub	r26, r26
 1be:	bb 1b       	sub	r27, r27
 1c0:	fd 01       	movw	r30, r26
 1c2:	0d c0       	rjmp	.+26     	; 0x1de <__udivmodsi4_ep>

000001c4 <__udivmodsi4_loop>:
 1c4:	aa 1f       	adc	r26, r26
 1c6:	bb 1f       	adc	r27, r27
 1c8:	ee 1f       	adc	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	a2 17       	cp	r26, r18
 1ce:	b3 07       	cpc	r27, r19
 1d0:	e4 07       	cpc	r30, r20
 1d2:	f5 07       	cpc	r31, r21
 1d4:	20 f0       	brcs	.+8      	; 0x1de <__udivmodsi4_ep>
 1d6:	a2 1b       	sub	r26, r18
 1d8:	b3 0b       	sbc	r27, r19
 1da:	e4 0b       	sbc	r30, r20
 1dc:	f5 0b       	sbc	r31, r21

000001de <__udivmodsi4_ep>:
 1de:	66 1f       	adc	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	88 1f       	adc	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	1a 94       	dec	r1
 1e8:	69 f7       	brne	.-38     	; 0x1c4 <__udivmodsi4_loop>
 1ea:	60 95       	com	r22
 1ec:	70 95       	com	r23
 1ee:	80 95       	com	r24
 1f0:	90 95       	com	r25
 1f2:	9b 01       	movw	r18, r22
 1f4:	ac 01       	movw	r20, r24
 1f6:	bd 01       	movw	r22, r26
 1f8:	cf 01       	movw	r24, r30
 1fa:	08 95       	ret

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
