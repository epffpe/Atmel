
Prueba2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  0000016a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000021  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000085  00000000  00000000  000001ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000050  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000071  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000074  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>

unsigned char z;

int main(){
	DDRB=0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	
	while (1){
		z=PINC;
  94:	66 b1       	in	r22, 0x06	; 6
		PORTB= 12/z;
  96:	8c e0       	ldi	r24, 0x0C	; 12
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	0e 94 52 00 	call	0xa4	; 0xa4 <__divmodhi4>
  a0:	65 b9       	out	0x05, r22	; 5
  a2:	f8 cf       	rjmp	.-16     	; 0x94 <main+0x4>

000000a4 <__divmodhi4>:
  a4:	97 fb       	bst	r25, 7
  a6:	09 2e       	mov	r0, r25
  a8:	07 26       	eor	r0, r23
  aa:	0a d0       	rcall	.+20     	; 0xc0 <__divmodhi4_neg1>
  ac:	77 fd       	sbrc	r23, 7
  ae:	04 d0       	rcall	.+8      	; 0xb8 <__divmodhi4_neg2>
  b0:	0c d0       	rcall	.+24     	; 0xca <__udivmodhi4>
  b2:	06 d0       	rcall	.+12     	; 0xc0 <__divmodhi4_neg1>
  b4:	00 20       	and	r0, r0
  b6:	1a f4       	brpl	.+6      	; 0xbe <__divmodhi4_exit>

000000b8 <__divmodhi4_neg2>:
  b8:	70 95       	com	r23
  ba:	61 95       	neg	r22
  bc:	7f 4f       	sbci	r23, 0xFF	; 255

000000be <__divmodhi4_exit>:
  be:	08 95       	ret

000000c0 <__divmodhi4_neg1>:
  c0:	f6 f7       	brtc	.-4      	; 0xbe <__divmodhi4_exit>
  c2:	90 95       	com	r25
  c4:	81 95       	neg	r24
  c6:	9f 4f       	sbci	r25, 0xFF	; 255
  c8:	08 95       	ret

000000ca <__udivmodhi4>:
  ca:	aa 1b       	sub	r26, r26
  cc:	bb 1b       	sub	r27, r27
  ce:	51 e1       	ldi	r21, 0x11	; 17
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <__udivmodhi4_ep>

000000d2 <__udivmodhi4_loop>:
  d2:	aa 1f       	adc	r26, r26
  d4:	bb 1f       	adc	r27, r27
  d6:	a6 17       	cp	r26, r22
  d8:	b7 07       	cpc	r27, r23
  da:	10 f0       	brcs	.+4      	; 0xe0 <__udivmodhi4_ep>
  dc:	a6 1b       	sub	r26, r22
  de:	b7 0b       	sbc	r27, r23

000000e0 <__udivmodhi4_ep>:
  e0:	88 1f       	adc	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	5a 95       	dec	r21
  e6:	a9 f7       	brne	.-22     	; 0xd2 <__udivmodhi4_loop>
  e8:	80 95       	com	r24
  ea:	90 95       	com	r25
  ec:	bc 01       	movw	r22, r24
  ee:	cd 01       	movw	r24, r26
  f0:	08 95       	ret

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
